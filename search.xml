<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ANR 触发原理与分析</title>
    <url>/posts/8b22/</url>
    <content><![CDATA[<h1 id="ANR-触发原理与分析"><a href="#ANR-触发原理与分析" class="headerlink" title="ANR 触发原理与分析"></a>ANR 触发原理与分析</h1><h2 id="1、什么是-ANR？"><a href="#1、什么是-ANR？" class="headerlink" title="1、什么是 ANR？"></a>1、什么是 ANR？</h2><p><strong>ANR（Application Not Responding）</strong>是指应用程序未响应，Android 系统对于一些事件需要在一定时间范围内完成，如果超过预定时间未能得到有效响应或者响应时间过长，都会造成 ANR。</p>
<p>ANR 的产生需要满足三个条件：</p>
<ul>
<li>主线程：只有<strong>应用程序的主线程</strong>响应超时才会产生 ANR</li>
<li>超时时间：<strong>产生ANR的上下文不同，超时时间也会不同</strong>，但是只要这个时间上线内没有响应就会 ANR</li>
<li>输入事件&#x2F;特定事件：<strong>输入事件是指按键、触屏等设备输入事件，特定操作是指 BroadcastReceiver 和 Service 的生命周期中的各个函数</strong>，产生 ANR 的上下文不同，导致 ANR 的原因也会不同</li>
</ul>
<p>为了降低因网络访问导致的 ANR，在 Android 4.0 之后强制规定访问网络必须在子线程处理，如果在主线程访问网络将会抛出 NetworkOnMainThreadException。</p>
<p>只要是耗时操作都可能会阻塞主线程，耗时操作要求放在子线程。</p>
<h2 id="2、ANR-发生场景"><a href="#2、ANR-发生场景" class="headerlink" title="2、ANR 发生场景"></a>2、ANR 发生场景</h2><table>
<thead>
<tr>
<th>ANR 事件</th>
<th>超时时间</th>
<th>相应日志描述</th>
</tr>
</thead>
<tbody><tr>
<td>点击事件（按键和触摸事件）</td>
<td>5s 内没被处理</td>
<td>Input event dispatching timed out</td>
</tr>
<tr>
<td>Service</td>
<td>前台 Service 20s，后台 Service 200s 未完成启动</td>
<td>Timeout executing service</td>
</tr>
<tr>
<td>BroadcastReceiver</td>
<td>前台广播 10s，后台广播 60s，onReceive() 在规定时间内未处理完</td>
<td>Timeout of broadcast Broadcast Record</td>
</tr>
<tr>
<td>ContentProvider</td>
<td>publish 在 10s 内没处理完</td>
<td>Timeout publishing content providers</td>
</tr>
</tbody></table>
<blockquote>
<p>需要注意的是，前台广播的 ANR 时间虽然是 10s 内 onReceive() 没有执行完就提示，这是在没有点击触摸事件导致 ANR 的前提下才是 10s，否则会先触发点击事件的 ANR，onReceive() 有可能执行不到 10s 就发生 ANR，所以不要在 onReceive() 处理耗时操作。</p>
</blockquote>
<p>在实际项目中，大多数的 ANR 都是点击触摸事件超时导致，会超时的原因也主要由以下三个原因导致：</p>
<ul>
<li>数据导致的 ANR：频繁 GC 导致线程暂停，处理事件时间被拉长</li>
<li>线程阻塞或死锁导致的 ANR</li>
<li>Binder 导致的 ANR：Binder 通信数据量过大</li>
</ul>
<h2 id="3、系统对-ANR-的捕捉原理"><a href="#3、系统对-ANR-的捕捉原理" class="headerlink" title="3、系统对 ANR 的捕捉原理"></a>3、系统对 ANR 的捕捉原理</h2><p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702632767.png" alt="系统对 ANR 的捕捉原理"></p>
<p>ANR 的触发过程可以理解为装炸弹和拆炸弹的过程。在本质上，<strong>ANR 也是建立在主线程 Looper 机制上的</strong>，简单理解就是<strong>先发送一个延时消息，然后在特定位置移除这个消息，如果消息没有被移除则证明整个流程出现问题，执行 ANR 处理</strong>。</p>
<p>触发 ANR 生成日志时，在不同的系统版本会有所不同，上图中是通过 ANRHelper 类处理 ANR 日志收集，在其他较低系统版本上是 AppErrors 类处理 ANR 日志收集。</p>
<h2 id="4、分析-ANR"><a href="#4、分析-ANR" class="headerlink" title="4、分析 ANR"></a>4、分析 ANR</h2><h3 id="4-1、日志分析思路"><a href="#4-1、日志分析思路" class="headerlink" title="4.1、日志分析思路"></a>4.1、日志分析思路</h3><ul>
<li>ANR 日志准备（traces.txt + mainlog）</li>
<li>在 traces.txt 找到 ANR 信息（<strong>发生 ANR 时间节点、主线程状态、事故点、ANR 类型</strong>）</li>
<li>在 mainlog 日志分析发生 ANR 时的 <strong>CPU 状态</strong></li>
<li>在 traces.txt 分析发生 ANR 时的 <strong>GC 情况（分析内存）</strong></li>
</ul>
<h3 id="4-2、ANR-日志准备（traces-txt-mainlog）"><a href="#4-2、ANR-日志准备（traces-txt-mainlog）" class="headerlink" title="4.2、ANR 日志准备（traces.txt + mainlog）"></a>4.2、ANR 日志准备（traces.txt + mainlog）</h3><p>在发生 ANR 的时候，系统会收集 ANR 相关的信息提供给开发者：</p>
<ul>
<li>发生 ANR 时会收集 trace 信息能找到各个线程的执行情况和 GC 信息，trace 文件保存在 <code>/data/anr/traces.txt</code></li>
<li>在 mainlog 日志中有 ANR 相关的信息和发生 ANR 时的 CPU 使用情况</li>
</ul>
<p><strong>简单说就是我们至少需要两份文件：&#x2F;data&#x2F;anr&#x2F;traces.txt 和 mainlog 日志</strong>。如果有 eventlog 能更快的定位到 ANR 的类型，当然 traces.txt 和 mainlog 也能分析得到。</p>
<p>traces.txt 文件通过命令 <code>adb pull /data/anr/</code> 获取。</p>
<p>mainlog 日志需要在程序运行时就时刻记录 <code>adb logcat -v time -b main &gt; mainlog.log</code>。</p>
<h3 id="4-3、traces-txt-信息概览"><a href="#4-3、traces-txt-信息概览" class="headerlink" title="4.3、traces.txt 信息概览"></a>4.3、traces.txt 信息概览</h3><p>当发生 ANR 时系统会在 <code>/data/anr/</code> 目录额外生成一份 traces.txt 日志，方便我们可以了解到发生 ANR 时的基本信息和堆栈信息。</p>
<p>traces.txt 日志信息如下（以主线程为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main 代表的主线程</span><br><span class="line">// Native 是线程状态</span><br><span class="line">// 下面的是堆栈信息</span><br><span class="line">&quot;main&quot; prio=5 tid=1 Native</span><br><span class="line">  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x73cff4c0 self=0xafa84400</span><br><span class="line">  | sysTid=5790 nice=0 cgrp=top-app sched=1073741825/1 handle=0xb2717534</span><br><span class="line">  | state=S schedstat=( 3240607247 80660807 2053 ) utm=283 stm=41 core=1 HZ=100</span><br><span class="line">  | stack=0xbe7c1000-0xbe7c3000 stackSize=8MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  kernel: (couldn&#x27;t read /proc/self/task/5790/stack)</span><br><span class="line">  native: #00 pc 00048968  /system/lib/libc.so (__ioctl+8)</span><br><span class="line">  native: #01 pc 0001b0cf  /system/lib/libc.so (ioctl+38)</span><br><span class="line">  native: #02 pc 0003cd25  /system/lib/libbinder.so (_ZN7android14IPCThreadState14talkWithDriverEb+168)</span><br><span class="line">  native: #03 pc 0003d737  /system/lib/libbinder.so (_ZN7android14IPCThreadState15waitForResponseEPNS_6ParcelEPi+238)</span><br><span class="line">  native: #04 pc 0003662d  /system/lib/libbinder.so (_ZN7android8BpBinder8transactEjRKNS_6ParcelEPS1_j+36)</span><br><span class="line">  native: #05 pc 000999cf  /system/lib/libandroid_runtime.so (???)</span><br><span class="line">  native: #06 pc 00607b09  /system/framework/arm/boot-framework.oat (Java_android_os_BinderProxy_transactNative__ILandroid_os_Parcel_2Landroid_os_Parcel_2I+140)</span><br><span class="line">  at android.os.BinderProxy.transactNative(Native method)</span><br><span class="line">  at android.os.BinderProxy.transact(Binder.java:930)</span><br><span class="line">  at android.view.IWindowSession$Stub$Proxy.remove(IWindowSession.java:924)</span><br><span class="line">  at android.view.ViewRootImpl.dispatchDetachedFromWindow(ViewRootImpl.java:3306)</span><br><span class="line">  at android.view.ViewRootImpl.doDie(ViewRootImpl.java:5961)</span><br><span class="line">  - locked &lt;0x0ed5befa&gt; (a android.view.ViewRootImpl)</span><br><span class="line">  at android.view.ViewRootImpl.die(ViewRootImpl.java:5938)</span><br><span class="line">  at android.view.WindowManagerGlobal.removeViewLocked(WindowManagerGlobal.java:459)</span><br><span class="line">  at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:397)</span><br><span class="line">  - locked &lt;0x05ba7d9d&gt; (a java.lang.Object)</span><br><span class="line">  at android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:126)</span><br><span class="line">  at d.h.b.q.n.a$c.removeViewImmediate(SourceFile:1)</span><br><span class="line">  at android.widget.Toast$TN.handleHide(Toast.java:496)</span><br><span class="line">  at android.widget.Toast$TN$2.handleMessage(Toast.java:346)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:102)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:154)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:6193)</span><br><span class="line">  at java.lang.reflect.Method.invoke!(Native method)</span><br><span class="line">  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)</span><br></pre></td></tr></table></figure>

<table>
    <thead>
        <tr>
            <th>关键信息</th>
            <th>描述</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>main</td>
            <td>main 标识是主线程。在 traces.txt 中如果是线程会命名为 “thread-x” 的格式，x 表示线程 id，逐步递增</td>
        </tr>
        <tr>
            <td>prio</td>
            <td>线程优先级，默认是 5</td>
        </tr>
        <tr>
            <td>tid</td>
            <td>tid 不是线程的 id，是线程唯一标识 id</td>
        </tr>
        <tr>
            <td>group</td>
            <td>线程组名称</td>
        </tr>
        <tr>
            <td>sCount</td>
            <td>该线程被挂起的次数</td>
        </tr>
        <tr>
            <td>dsCount</td>
            <td>线程被调试器挂起的次数</td>
        </tr>
        <tr>
            <td>obj</td>
            <td>对象地址</td>
        </tr>
        <tr>
            <td>self</td>
            <td>该线程 native 的地址</td>
        </tr>
        <tr>
            <td>sysTid</td>
            <td>线程号（主线程的线程号和进程号相同）</td>
        </tr>
        <tr>
            <td>nice</td>
            <td>线程的调度优先级</td>
        </tr>
        <tr>
            <td>sched</td>
            <td>分别标志了线程的调度策略和优先级</td>
        </tr>
        <tr>
            <td>cgrp</td>
            <td>调度归属组</td>
        </tr>
        <tr>
            <td>handle</td>
            <td>线程处理函数的地址</td>
        </tr>
        <tr>
            <td>state</td>
            <td>调度状态</td>
        </tr>
        <tr>
            <td>schedstat</td>
            <td>从 /proc/[pid]/task/[tid]/schedstat 读出，三个值分别表示线程在 cpu 上执行的时间、线程的等待时间和线程执行的时间片长度，不支持这项信息的三个值都是 0</td>
        </tr>
        <tr>
            <td>utm</td>
            <td>线程用户态下使用的时间值（单位是 jiffies）</td>
        </tr>
        <tr>
            <td>stm</td>
            <td>内核态下的调度时间值</td>
        </tr>
        <tr>
            <td>core</td>
            <td>最后执行这个线程的 cpu 核的序号</td>
        </tr>
    </tbody>
</table>

<table>
    <thead>
        <tr>
            <th>线程状态</th>
            <th>说明</th>
            <th>描述</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>UNDEFINED = -1</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>ZOMBIE = 0</td>
            <td>TERMINATED</td>
            <td>线程已经终止</td>
        </tr>
        <tr>
            <td>RUNNING = 1</td>
            <td>RUNNABLE or running now</td>
            <td>正常运行</td>
        </tr>
        <tr>
            <td>TIMED_WAIT = 2</td>
            <td>TIMED_WAITING Object.wait()</td>
            <td>等待，一般是调用 Object.wait(2000)</td>
        </tr>
        <tr>
            <td>MONITOR = 3</td>
            <td>BLOCKED on a monitor</td>
            <td>synchronized</td>
        </tr>
        <tr>
            <td>WAIT = 4</td>
            <td>WAITING in Object.wait()</td>
            <td>调用 Object.wait() 或 LockSupport.park() 等待</td>
        </tr>
        <tr>
            <td>INITIALIZING = 5</td>
            <td>allocated, not yet running</td>
            <td>已经初始化线程，但是还没有进行 start</td>
        </tr>
        <tr>
            <td>STARTING = 6</td>
            <td>started, not yet on thread list</td>
            <td>已经 start 但是没有 run</td>
        </tr>
        <tr>
            <td>NATIVE = 7</td>
            <td>off in a JNI native method</td>
            <td>native 线程出问题，有三种常见情况：<br>1、项目自己有 JNI 开发线程<br>2、有 IO 操作（IO 的本质是调用 Linux 内核的函数）<br>3、AQS 锁住了</td>
        </tr>
        <tr>
            <td>VMWAIT = 8</td>
            <td>waiting on a VM resource</td>
            <td>没有时间片</td>
        </tr>
        <tr>
            <td>SUSPENDED = 9</td>
            <td>suspended，usually by GC or debugger</td>
            <td>被 GC 挂起的（该情况发生的可能性不高）</td>
        </tr>
        <tr>
            <td>Blocked</td>
            <td></td>
            <td>死锁（查看 CPU usage 会发现几乎都是 0%，这也是死锁的体现）</td>
        </tr>
    </tbody>
</table>

<blockquote>
<p><strong>重点关注线程状态和堆栈信息</strong>，如果堆栈信息中有我们应用的函数，它们能够帮助我们快速定位到具体位置。</p>
</blockquote>
<h3 id="4-4、在-traces-txt-找到-ANR-信息（发生-ANR-时间节点、主线程状态、事故点、ANR-类型）"><a href="#4-4、在-traces-txt-找到-ANR-信息（发生-ANR-时间节点、主线程状态、事故点、ANR-类型）" class="headerlink" title="4.4、在 traces.txt 找到 ANR 信息（发生 ANR 时间节点、主线程状态、事故点、ANR 类型）"></a>4.4、在 traces.txt 找到 ANR 信息（<strong>发生 ANR 时间节点、主线程状态、事故点、ANR 类型</strong>）</h3><p>当我们拿到 traces.txt 文件时，主要找四个信息：<strong>发生 ANR 时的时间节点、主线程状态（在文件中搜索 main）、ANR 类型、事故点（堆栈信息中找到我们应用中的函数）</strong>。</p>
<p>分析发生 ANR 时进程中各个线程的堆栈，一般有几种情况：</p>
<ul>
<li><p>主线程状态是 <strong>Runnable</strong> 或 <strong>Native</strong>，堆栈信息中有我们应用中的函数，则很有可能就是执行该函数时候发生了超时</p>
</li>
<li><p>主线程状态是 <strong>Block</strong>，非常明显的线程被锁，这时候可以看是被哪个线程锁了，可以考虑优化代码，如果是死锁问题，就更需要及时解决了</p>
</li>
<li><p>由于抓 trace 的时刻很有可能耗时操作已经执行完了（ANR -&gt; 耗时操作执行完毕 -&gt; 系统抓 trace），这时候的 trace 就没有什么用了（在堆栈信息找不到我们应用的函数调用）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/anr/traces.txt</span><br><span class="line"></span><br><span class="line">// 发生 ANR 时的时间节点</span><br><span class="line">----- pid 5790 at 2022-05-23 10:21:32 -----</span><br><span class="line"></span><br><span class="line">// 主线程状态</span><br><span class="line">&quot;main&quot; prio=5 tid=1 Waiting</span><br><span class="line"></span><br><span class="line">// 事故点</span><br><span class="line">// 不一定能找到我们应用的调用函数，因为抓 trace 的时候耗时操作可能已经执行完了，例如下面的堆栈</span><br><span class="line">at android.os.BinderProxy.transactNative(Native method)</span><br><span class="line">at android.os.BinderProxy.transact(Binder.java:930)</span><br><span class="line">at android.view.IWindowSession$Stub$Proxy.remove(IWindowSession.java:924)</span><br><span class="line">at android.view.ViewRootImpl.dispatchDetachedFromWindow(ViewRootImpl.java:3306)</span><br><span class="line">at android.view.ViewRootImpl.doDie(ViewRootImpl.java:5961)</span><br><span class="line">- locked &lt;0x0ed5befa&gt; (a android.view.ViewRootImpl)</span><br><span class="line">at android.view.ViewRootImpl.die(ViewRootImpl.java:5938)</span><br><span class="line">at android.view.WindowManagerGlobal.removeViewLocked(WindowManagerGlobal.java:459)</span><br><span class="line">at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:397)</span><br><span class="line">- locked &lt;0x05ba7d9d&gt; (a java.lang.Object)</span><br><span class="line">at android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:126)</span><br><span class="line">at d.h.b.q.n.a$c.removeViewImmediate(SourceFile:1)</span><br><span class="line">at android.widget.Toast$TN.handleHide(Toast.java:496)</span><br><span class="line">at android.widget.Toast$TN$2.handleMessage(Toast.java:346)</span><br><span class="line">at android.os.Handler.dispatchMessage(Handler.java:102)</span><br><span class="line">at android.os.Looper.loop(Looper.java:154)</span><br><span class="line">at android.app.ActivityThread.main(ActivityThread.java:6193)</span><br><span class="line">at java.lang.reflect.Method.invoke!(Native method)</span><br><span class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886)</span><br><span class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)</span><br></pre></td></tr></table></figure>

<p>因为从上面的堆栈中其实不能分析到 ANR 类型，所以可以再借助 eventlog 或 mainlog 日志找到，可以在 mainlog 日志搜索关键词 <strong>ANR in</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mainlog.log（对应的 adb logcat -v time -b main &gt; mainlog.log）</span><br><span class="line"></span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: ANR in com.example.demo (com.example.demo/.ui.login.LoginActivity)</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: PID: 5790</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: PSS: 42718 kB</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: Reason: Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: Load: 16.16 / 10.88 / 4.95</span><br></pre></td></tr></table></figure>

<p>在 eventlog 日志搜索关键词 <strong>am_anr</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">05-23 10:20:29.166  2003  2016 I am_anr  : [0,3392,com.example.demo,955792964,Input dispatching timed out (Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.)]</span><br></pre></td></tr></table></figure>

<h3 id="4-5、在-mainlog-日志分析发生-ANR-时的-CPU-状态"><a href="#4-5、在-mainlog-日志分析发生-ANR-时的-CPU-状态" class="headerlink" title="4.5、在 mainlog 日志分析发生 ANR 时的 CPU 状态"></a>4.5、在 mainlog 日志分析发生 ANR 时的 CPU 状态</h3><p>在 mainlog 日志中根据 ANR 时间节点并搜索关键词 <strong>CPU usage</strong> 查看发生 ANR 前后 CPU 的使用情况，从 CPU usage 信息中大概可以分析：</p>
<ul>
<li><p>如果某些进程的 CPU 占用百分比较高，几乎占用了所有 CPU 资源，而发生 ANR 的进程（一般说的是我们的 app 进程）CPU 占用为 0% 或非常低，则认为 CPU 资源被占用，app 进程没有被分配足够的资源，从而发生了 ANR。这种情况多数可以认为是系统状态的问题，并不是由应用造成的（<strong>简单讲就是其他进程 CPU 使用率非常高自己低，就是系统资源分配不足导致</strong>）；</p>
</li>
<li><p>如果发生 ANR 的进程（一般说的是我们的 app 进程）CPU 占用较高，如到了 80% 或 90% 以上，则可以怀疑应用内一些代码不合理消耗掉了 CPU 资源，如出现了死循环或者后台有许多线程执行任务等等原因，这就要结合 traces.txt 和 ANR 前后的 mainlog 日志进一步分析（<strong>简单理解就是 IO 非常频繁，要么死循环了，要么上锁了</strong>）；</p>
</li>
<li><p>如果 CPU 总用量不高，该进程和其他进程的占用过高，这有一定概率是由于某些主线程的操作就是耗时过长，或者是由于主进程被锁造成的。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mainlog.log</span><br><span class="line"></span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: CPU usage from 2068ms to -8489ms ago (2022-05-23 10:21:27.434 to 2022-05-23 10:21:37.991):</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   30% 2003/system_server: 16% user + 14% kernel / faults: 7835 minor 541 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   13% 5790/com.example.demo: 9.2% user + 3.9% kernel / faults: 11775 minor 141 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   5.4% 247/mmcqd/0: 0% user + 5.4% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   5.4% 2591/com.xtc.i3launcher: 4.3% user + 1% kernel / faults: 4186 minor 276 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   3.3% 36/kworker/u8:3: 0% user + 3.3% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.9% 410/audioserver: 1.7% user + 1.2% kernel / faults: 79 minor 3 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.8% 5754/com.netease.xtc.cloudmusic: 2.8% user + 0% kernel / faults: 1954 minor 315 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.3% 2457/com.android.phone: 1.6% user + 0.7% kernel / faults: 2226 minor 513 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.2% 35/kworker/u8:2: 0% user + 2.2% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.2% 356/surfaceflinger: 0.9% user + 1.3% kernel / faults: 464 minor</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2.1% 110/kswapd0: 0% user + 2.1% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   2% 448/kworker/u8:8: 0% user + 2% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   1.9% 444/kworker/u8:7: 0% user + 1.9% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   1.9% 4683/kworker/u8:9: 0% user + 1.9% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   1.4% 4782/com.android.commands.monkey: 0.5% user + 0.8% kernel / faults: 1598 minor 3 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   1.1% 299/logd: 0.5% user + 0.5% kernel / faults: 200 minor 115 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   1.1% 3499/super_log: 0.2% user + 0.8% kernel / faults: 69 minor 1 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.9% 7/rcu_preempt: 0% user + 0.9% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.8% 2795/com.android.dialer: 0.7% user + 0% kernel / faults: 1270 minor 221 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.4% 4696/mdss_fb0: 0% user + 0.4% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.3% 12/ksoftirqd/1: 0% user + 0.3% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.3% 20/ksoftirqd/3: 0% user + 0.3% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.3% 258/core_ctl/0: 0% user + 0.3% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.3% 2178/VosRXThread: 0% user + 0.3% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.3% 2183/sdcard: 0% user + 0.3% kernel / faults: 42 minor 3 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.2% 3/ksoftirqd/0: 0% user + 0.2% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.2% 290/jbd2/mmcblk0p43: 0% user + 0.2% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.1% 15/migration/2: 0% user + 0.1% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.1% 16/ksoftirqd/2: 0% user + 0.1% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.1% 19/migration/3: 0% user + 0.1% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.1% 269/kworker/0:4: 0% user + 0.1% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0.1% 355/servicemanager: 0% user + 0% kernel / faults: 68 minor</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 1//init: 0% user + 0% kernel / faults: 6 minor 4 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 5/kworker/0:0H: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 8/rcu_sched: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 10/migration/0: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 11/migration/1: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 14/kworker/1:0H: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 135/mdp3_ppp: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 223/irq/114-5-0024: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 271/kworker/0:1H: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 276/kworker/3:3: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 309/debuggerd: 0% user + 0% kernel / faults: 237 minor 27 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 415/media.extractor: 0% user + 0% kernel / faults: 117 minor 66 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 419/netd: 0% user + 0% kernel / faults: 134 minor 2 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 2177/VosTXThread: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 2713/com.xtc.i3launcher:push: 0% user + 0% kernel / faults: 955 minor 58 major</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 2767/perffeedbackd: 0% user + 0% kernel / faults: 77 minor</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager:   0% 4546/kworker/1:3: 0% user + 0% kernel</span><br><span class="line">05-23 10:21:38.029  2003  2016 E ActivityManager: 84% TOTAL: 14% user + 17% kernel + 51% iowait + 0.6% softirq</span><br></pre></td></tr></table></figure>

<p>发生死锁时的 CPU 状态如下：</p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702632878.png" alt="发生死锁时的 CPU 状态"></p>
<h3 id="4-6、在-traces-txt-分析发生-ANR-时的-GC-情况（分析内存）"><a href="#4-6、在-traces-txt-分析发生-ANR-时的-GC-情况（分析内存）" class="headerlink" title="4.6、在 traces.txt 分析发生 ANR 时的 GC 情况（分析内存）"></a>4.6、在 traces.txt 分析发生 ANR 时的 GC 情况（分析内存）</h3><p>当上面分析了 CPU 状态后发现是非 CPU 问题时，就需要从内存 GC 分析，因为 GC 会触发 STW（Stop The World）导致线程执行时间被拉长。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这里只截取了一部分 GC 信息</span><br><span class="line">// 如果还有其他信息，还需要分析如 GC 回收率等，下面的 GC 信息是正常的，这里仅用于展示</span><br><span class="line">Total time waiting for GC to complete: 64.298ms</span><br><span class="line">Total GC count: 30</span><br><span class="line">Total GC time: 4.961s</span><br><span class="line">Total blocking GC count: 1</span><br><span class="line">Total blocking GC time: 149.286ms</span><br></pre></td></tr></table></figure>

<h3 id="6-7、小结"><a href="#6-7、小结" class="headerlink" title="6.7、小结"></a>6.7、小结</h3><p>ANR 问题主要分为两类问题：</p>
<ul>
<li><strong>CPU 问题</strong></li>
<li><strong>GC 问题</strong></li>
</ul>
<p><strong>定位 ANR 的步骤为：</strong></p>
<ul>
<li><p><strong>判定是否为 CPU 问题：常见的是在主线程事件发生</strong></p>
</li>
<li><p><strong>如果非 CPU 问题，再去定位 GC 问题</strong></p>
</li>
<li><p><strong>GC 问题直接去看 traces.txt 上面的 GC 信息</strong></p>
<ul>
<li><p><strong>常规 GC 导致的问题，就是有频繁的对象创建</strong></p>
</li>
<li><p><strong>常规少量数据不会出现有这个问题，但是数据量异常将会引发连锁反应，ANR 是结果的体现，具体体现是卡顿和内存泄漏</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ul>
<li><strong>在 traces.txt 找到发生 ANR 时间节点、主线程的状态、ANR 类型和事故点</strong></li>
<li><strong>在 mainlog 日志查看 CPU 状态</strong></li>
<li><strong>根据以上步骤收集的信息大致判断问题原因</strong><ul>
<li><strong>是 CPU 问题还是 非 CPU 问题</strong></li>
<li><strong>如果是非 CPU 问题，那么看 GC 处理信息</strong></li>
</ul>
</li>
<li><strong>在 traces.txt 分析 CG 信息</strong></li>
<li><strong>结合项目代码和以上步骤分析到的原因，定位到问题修复 ANR</strong></li>
</ul>
<p>其实 ANR 发生的原因本质上只有三个：</p>
<ul>
<li><strong>线程挂起</strong></li>
<li><strong>CPU 不给资源</strong></li>
<li><strong>GC 触发 STW 导致线程执行时间被拉长</strong></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
        <category>App</category>
      </categories>
      <tags>
        <tag>ANR</tag>
      </tags>
  </entry>
  <entry>
    <title>ATV 开机向导定制化与预置客制化 Launcher</title>
    <url>/posts/75d1/</url>
    <content><![CDATA[<h1 id="ATV-开机向导定制化与预置客制化-Launcher"><a href="#ATV-开机向导定制化与预置客制化-Launcher" class="headerlink" title="ATV 开机向导定制化与预置客制化 Launcher"></a>ATV 开机向导定制化与预置客制化 Launcher</h1><h2 id="1、开机向导定制化"><a href="#1、开机向导定制化" class="headerlink" title="1、开机向导定制化"></a>1、开机向导定制化</h2><blockquote>
<p>Google 官方说明链接 <a href="https://docs.partner.android.com/tv/build/experience/setup-9?hl=zh-cn">Android 9 及更高版本的设置概览  | Android TV OS  | Android Partners</a></p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702601537.png" alt="atv-suw-flow"></p>
<p>简单来说就是需要在系统中预置一个符合 Google 规范的 apk，通过修改 apk 里面的配置文件达到自定义开机向导的功能。</p>
</blockquote>
<h3 id="1-1、下载官方示例代码"><a href="#1-1、下载官方示例代码" class="headerlink" title="1.1、下载官方示例代码"></a>1.1、下载官方示例代码</h3><blockquote>
<p><a href="https://docs.partner.android.com/tv/build/experience/setup-9/sample-code?hl=zh-cn">示例代码  | Android TV OS  | Android Partners</a></p>
</blockquote>
<h3 id="1-2、编写-Android-bp-文件编译-apk"><a href="#1-2、编写-Android-bp-文件编译-apk" class="headerlink" title="1.2、编写 Android.bp 文件编译 apk"></a>1.2、编写 Android.bp 文件编译 apk</h3><p>LauncherCustomization 应用可以放置 <code>vendor/amlogic/common/apps/</code> 路径下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/amlogic/common/apps/LauncherCustomization/</span><br><span class="line">├── Android.bp</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── res</span><br><span class="line">│   ├── raw</span><br><span class="line">│   │   ├── btpair_00_continue.mp4</span><br><span class="line">│   │   ├── btpair_01_searching.mp4</span><br><span class="line">│   │   ├── btpair_02_tran_01.mp4</span><br><span class="line">│   │   ├── btpair_03_instruction.mp4</span><br><span class="line">│   │   ├── btpair_04_tran_02.mp4</span><br><span class="line">│   │   ├── btpair_05_connecting.mp4</span><br><span class="line">│   │   ├── btpair_06_success.mp4</span><br><span class="line">│   │   ├── btpair_07_error.mp4</span><br><span class="line">│   │   ├── configuration.xml</span><br><span class="line">│   │   ├── remote_pairing.xml</span><br><span class="line">│   │   └── round_input_white_36dp.png</span><br><span class="line">│   └── values</span><br><span class="line">│       └── config.xml</span><br><span class="line">└── src</span><br><span class="line">    └── com</span><br><span class="line">        └── droidlogic</span><br><span class="line">            ├── launcher</span><br><span class="line">            │   └── provider</span><br><span class="line">            │       ├── ConfigurationProvider.java</span><br><span class="line">            │       ├── CustomizationReceiver.java</span><br><span class="line">            │       └── TestCustomizationReceiver.java</span><br><span class="line">            └── PartnerReceiver.java</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>apk 需要编译为拥有系统签名的特权应用</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Copyright (C) 2014 The Android Open Source Project</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">// See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">// limitations under the License.</span></span><br><span class="line"></span><br><span class="line">android_app <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;LauncherCustomization&quot;</span><span class="punctuation">,</span></span><br><span class="line">    platform_apis<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    certificate<span class="punctuation">:</span> <span class="string">&quot;platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">    privileged<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    static_libs<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;android-support-annotations&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    resource_dirs<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;res&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    srcs<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/**/I*.aidl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;src/**/*.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3、修改配置文件"><a href="#1-3、修改配置文件" class="headerlink" title="1.3、修改配置文件"></a>1.3、修改配置文件</h3><p>可以通过修改 <code>res/values/config.xml</code> 文件自定义开机向导流程，如是否播放背景音乐等。代码示例如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Whether to show the assistant hotword step during Setup.</span></span><br><span class="line"><span class="comment">    This is only relevant if the device supports hotwording. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;show_assistant_hotword&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Whether to allow the welcome (locale picker) to be shown. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;show_welcome&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Display &quot;SKIP&quot; in network selection screen --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;show_skip_network&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Allow user to skip Google signin at signin setup step --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;show_skip_signin&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Whether to present the device-to-device bootstrap (QuickSetup) flow. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;show_quicksetup&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Show wifi WPS option at top of list --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bool name=&quot;show_wps_at_top&quot;&gt;true&lt;/bool&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Prevent users from returning to the pre-setup oem customization hook --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;prevent_prehook_replay&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Disable the Setup wizard native BT pairing page --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;disable_remote_pairing&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Whether to allow background music to play. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;play_background_music&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Provide a list of locales to show atop the default locale picker.</span></span><br><span class="line"><span class="comment">     Relevant only if the default locale picker is shown. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">&quot;welcome_preferred_locales&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">item</span>&gt;</span>en-US<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以添加自定义的 HOOK Activity，详细说明可前往 Google 教程网页。</p>
<h3 id="1-4、自定义蓝牙配对页面"><a href="#1-4、自定义蓝牙配对页面" class="headerlink" title="1.4、自定义蓝牙配对页面"></a>1.4、自定义蓝牙配对页面</h3><p>先禁用 Google 原生蓝牙配对页面，在 <code>res/values/config.xml</code> 文件中设置即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Disable the Setup wizard native BT pairing page --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;disable_remote_pairing&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写自定义蓝牙配对代码，可参考这一笔 commit 4110abd825c3d0453b5b951b7bb42df64f970fde。</p>
<h2 id="2、预置客制化-Launcher"><a href="#2、预置客制化-Launcher" class="headerlink" title="2、预置客制化 Launcher"></a>2、预置客制化 Launcher</h2><h3 id="2-1、禁用-Google-原生-Luncher"><a href="#2-1、禁用-Google-原生-Luncher" class="headerlink" title="2.1、禁用 Google 原生 Luncher"></a>2.1、禁用 Google 原生 Luncher</h3><p>Google 原生 Luncher 为 gtvs 包中的 TVLauncher.apk。可通过在 Android.mk 文件中添加判断，使用客制化 Luncher 时不编译 TVLauncher。</p>
<p><code>device/amlogic/sti625Xd315/sti625Xd315.mk</code> 中添加 <code>BUILD_CUSTOM_LAUNCHER</code> 定义</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># Askey</span></span><br><span class="line"><span class="comment"># 1. add custom launcher[BUILD_CUSTOM_LAUNCHER)] </span></span><br><span class="line"><span class="comment">#        true  : custom launcher</span></span><br><span class="line"><span class="comment">#        false : Google launcher</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">BUILD_CUSTOM_LAUNCHER := true</span><br></pre></td></tr></table></figure>

<p><code>vendor/google_gtvs/products/gtvs.mk</code> 中判断 <code>BUILD_CUSTOM_LAUNCHER</code> 属性值</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(BUILD_CUSTOM_LAUNCHER)</span>,true)</span><br><span class="line">PRODUCT_PACKAGES += \</span><br><span class="line">    TVLauncher</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2、编译客制化-Launcher"><a href="#2-2、编译客制化-Launcher" class="headerlink" title="2.2、编译客制化 Launcher"></a>2.2、编译客制化 Launcher</h3><p>客制化 Launcher 相关文件放置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/amlogic/sti625xd315/</span><br><span class="line">├── apps</span><br><span class="line">│   ├── Android.mk</span><br><span class="line">│   ├── Ott_AMS</span><br><span class="line">│   │   └── ott_ams_1.0.36.5.apk</span><br><span class="line">│   └── VZ_Launcher</span><br><span class="line">│       └── sb_custom_launcher_3.6.5290.apk</span><br><span class="line">├── device-vendor.mk</span><br><span class="line">└── etc</span><br><span class="line">    ├── permissions</span><br><span class="line">    │   ├── privapp-permissions-ottams.xml</span><br><span class="line">    │   └── privapp-permissions-vz.xml</span><br><span class="line">    └── sysconfig</span><br><span class="line">        ├── operator_flags_custom_launcher.xml</span><br><span class="line">        ├── operator_flags.xml</span><br><span class="line">        └── verizon_feature_flag.xml</span><br></pre></td></tr></table></figure>

<p>编写 <code>vendor/amlogic/sti625xd315/apps/Android.mk</code> 文件</p>
<blockquote>
<p><strong>注意：</strong>需要设置 <code>LOCAL_PRIVILEGED_MODULE</code> 属性为 <code>true</code>，将应用编译为特权应用。</p>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := VzLauncher</span><br><span class="line">LOCAL_SRC_FILES := VZ_Launcher/sb_custom_launcher_3.6.5290.apk</span><br><span class="line">LOCAL_MODULE_CLASS := APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX := .apk</span><br><span class="line">LOCAL_BUILT_MODULE_STEM := package.apk</span><br><span class="line">LOCAL_CERTIFICATE := PRESIGNED</span><br><span class="line"><span class="comment">#LOCAL_CERTIFICATE := platform</span></span><br><span class="line">LOCAL_PRIVILEGED_MODULE := true</span><br><span class="line">LOCAL_PRODUCT_MODULE := true</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_PREBUILT)</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := OttAms</span><br><span class="line">LOCAL_SRC_FILES := Ott_AMS/ott_ams_1.0.36.5.apk</span><br><span class="line">LOCAL_MODULE_CLASS := APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX := .apk</span><br><span class="line">LOCAL_BUILT_MODULE_STEM := package.apk</span><br><span class="line">LOCAL_CERTIFICATE := PRESIGNED</span><br><span class="line"><span class="comment">#LOCAL_CERTIFICATE := platform</span></span><br><span class="line">LOCAL_PRIVILEGED_MODULE := true</span><br><span class="line">LOCAL_PRODUCT_MODULE := true</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_PREBUILT)</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3、添加配置文件"><a href="#2-3、添加配置文件" class="headerlink" title="2.3、添加配置文件"></a>2.3、添加配置文件</h3><p>在编译时还需要同时添加相关配置文件，具体配置如下所示所示。</p>
<p><code>vendor/amlogic/sti625xd315/device-vendor.mk</code> 通过 <code>BUILD_CUSTOM_LAUNCHER</code> 属性判断是否编译客制化 Launcher</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(BUILD_CUSTOM_LAUNCHER)</span>, true)</span><br><span class="line">PRODUCT_PACKAGES += \</span><br><span class="line">    VzLauncher \</span><br><span class="line">    OttAms</span><br><span class="line"></span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">    vendor/amlogic/sti6250d315/etc/permissions/privapp-permissions-vz.xml:product/etc/permissions/privapp-permissions-verizon.xml \</span><br><span class="line">    vendor/amlogic/sti6250d315/etc/permissions/privapp-permissions-ottams.xml:product/etc/permissions/privapp-permissions-ottams.xml \</span><br><span class="line">    vendor/amlogic/sti6250d315/etc/sysconfig/operator_flags_custom_launcher.xml:system/etc/sysconfig/operator_flags.xml \</span><br><span class="line">    vendor/amlogic/sti6250d315/etc/sysconfig/verizon_feature_flag.xml:vendor/etc/permissions/verizon_feature_flag.xml</span><br><span class="line"><span class="keyword">else</span>    </span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">    vendor/amlogic/sti6250d315/etc/sysconfig/operator_flags.xml:system/etc/sysconfig/operator_flags.xml</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p><code>vendor/amlogic/sti625xd315/etc/permissions/privapp-permissions-ottams.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">privapp-permissions</span> <span class="attr">package</span>=<span class="string">&quot;com.verizon.tv.ams&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.WRITE_SECURE_SETTINGS&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">privapp-permissions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vendor/amlogic/sti625xd315/etc/permissions/privapp-permissions-vz.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">privapp-permissions</span> <span class="attr">package</span>=<span class="string">&quot;com.verizon.tv.launcher.soundbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;com.verizon.tv.launcher.SEARCH&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.WAKE_LOCK&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.BLUETOOTH&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_NOTIFICATIONS&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;com.android.providers.tv.permission.ACCESS_ALL_EPG_DATA&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.REQUEST_DELETE_PACKAGES&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;com.android.providers.tv.permission.WRITE_EPG_DATA&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;com.android.providers.tv.permission.READ_EPG_DATA&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.WRITE_SECURE_SETTINGS&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.ACCESS_ALL_EPG_DATA&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.REBOOT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.INSTALL_PACKAGE_UPDATES&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.READ_LOGS&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.FORCE_STOP_PACKAGES&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">permission</span> <span class="attr">name</span>=<span class="string">&quot;android.permission.BLUETOOTH_PRIVILEGED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">privapp-permissions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vendor/amlogic/sti625xd315/etc/sysconfig/operator_flags.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- These are configurations that must exist on all Android TV devices. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--janice@20190723, add Operator Tier feature flags for Custom Launcher--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Confirms that a device is eligible for the suite of Operator customizations --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;com.google.android.tv.operator_tier&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Confirms that a device is *eligible* for a Custom Launcher --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;com.google.android.tv.custom_launcher_eligible&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vendor/amlogic/sti625xd315/etc/sysconfig/operator_flags_custom_launcher.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- These are configurations that must exist on all Android TV devices. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--janice@20190723, add Operator Tier feature flags for Custom Launcher--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Confirms that a device is eligible for the suite of Operator customizations --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;com.google.android.tv.operator_tier&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Confirms that a device is *eligible* for a Custom Launcher --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;com.google.android.tv.custom_launcher_eligible&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Confirms that a device uses a Custom Launcher, rather than TvLauncher --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;com.google.android.tv.custom_launcher&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vendor/amlogic/sti625xd315/etc/sysconfig/verizon_feature_flag.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;verizon.apps.modelgroup&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;verizon.apps.soundbar.modelgroup&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;verizon.framework.audiosettings&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;verizon.framework.hdmisettings&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;verizon.software.hdmi_setup_inputs&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
        <category>ATV</category>
      </categories>
      <tags>
        <tag>ATV</tag>
        <tag>Launcher</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Binder(C++ 实现)</title>
    <url>/posts/e1e6/</url>
    <content><![CDATA[<h1 id="Android-Binder-C-实现"><a href="#Android-Binder-C-实现" class="headerlink" title="Android Binder(C++ 实现)"></a>Android Binder(C++ 实现)</h1><h2 id="1、C-Binder-使用规范"><a href="#1、C-Binder-使用规范" class="headerlink" title="1、C++ Binder 使用规范"></a>1、C++ Binder 使用规范</h2><p><strong>Android Binder C++开发的架构图如下：</strong></p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702382033.png" alt="Android Binder C++开发架构图"></p>
<h3 id="1-1、IInterface-h"><a href="#1-1、IInterface-h" class="headerlink" title="1.1、IInterface.h"></a>1.1、IInterface.h</h3><blockquote>
<p>IInterface.h 是 C++ 层 Binder 通信的规范定制者, 客户端和服务端都要包含该头文件。</p>
<p>IInterface.h 中提供了 C++ 层 Binder 通信必要的工具。</p>
<p>Android 源码位置：<code>frameworks/native/libs/binder/include/binder/IInterface.h</code></p>
</blockquote>
<h3 id="1-2、客户端"><a href="#1-2、客户端" class="headerlink" title="1.2、客户端"></a>1.2、客户端</h3><p>客户端需要继承 <code>IInterface</code> 和 <code>BpInterface</code>，<code>BpInterface</code> 是个模板类，作用其实是使客户端对象继承自模板对象，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/IInterface.h</span></span><br><span class="line"><span class="comment">// IInterface 中定义了对 Binder 的转换操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IInterface</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> RefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">            <span class="built_in">IInterface</span>();</span><br><span class="line">            <span class="function"><span class="type">static</span> sp&lt;IBinder&gt;  <span class="title">asBinder</span><span class="params">(<span class="type">const</span> IInterface*)</span></span>;</span><br><span class="line">            <span class="function"><span class="type">static</span> sp&lt;IBinder&gt;  <span class="title">asBinder</span><span class="params">(<span class="type">const</span> sp&lt;IInterface&gt;&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span>                     ~<span class="built_in">IInterface</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BpInterface</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BpInterface</span> : <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BpRefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">                                <span class="comment">// remote 是服务端的 Binder 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>                    <span class="title">BpInterface</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; remote)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> INTERFACE           BaseInterface;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>BpInterface</code> 继承自 <code>BpRefBase</code>，在首次引用时会调用 <code>onFirstRef()</code> 函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/Binder.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BpRefBase</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> RefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span>                <span class="title">BpRefBase</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; o)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span>                 ~<span class="built_in">BpRefBase</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span>            <span class="title">onFirstRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span>            <span class="title">onLastStrongRef</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span>            <span class="title">onIncStrongAttempted</span><span class="params">(<span class="type">uint32_t</span> flags, <span class="type">const</span> <span class="type">void</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// remote() 函数直接使用，代表了服务端对象</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  IBinder*        <span class="title">remote</span><span class="params">()</span>                </span>&#123; <span class="keyword">return</span> mRemote; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span>  IBinder*        <span class="title">remote</span><span class="params">()</span> <span class="type">const</span>          </span>&#123; <span class="keyword">return</span> mRemote; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">                            <span class="built_in">BpRefBase</span>(<span class="type">const</span> BpRefBase&amp; o);</span><br><span class="line">    BpRefBase&amp;              <span class="keyword">operator</span>=(<span class="type">const</span> BpRefBase&amp; o);</span><br><span class="line"></span><br><span class="line">    IBinder* <span class="type">const</span>          mRemote;</span><br><span class="line">    RefBase::weakref_type*  mRefs;</span><br><span class="line">    std::atomic&lt;<span class="type">int32_t</span>&gt;    mState;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// frameworks/native/libs/binder/Binder.cpp</span></span><br><span class="line"><span class="comment">// BpRefBase 构造实现</span></span><br><span class="line">BpRefBase::<span class="built_in">BpRefBase</span>(<span class="type">const</span> sp&lt;IBinder&gt;&amp; o)</span><br><span class="line">    : <span class="built_in">mRemote</span>(o.<span class="built_in">get</span>()), <span class="built_in">mRefs</span>(<span class="literal">nullptr</span>), <span class="built_in">mState</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">extendObjectLifetime</span>(OBJECT_LIFETIME_WEAK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mRemote) &#123;</span><br><span class="line">        mRemote-&gt;<span class="built_in">incStrong</span>(<span class="keyword">this</span>);           <span class="comment">// Removed on first IncStrong().</span></span><br><span class="line">        mRefs = mRemote-&gt;<span class="built_in">createWeak</span>(<span class="keyword">this</span>);  <span class="comment">// Held for our entire lifetime.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3、服务端"><a href="#1-3、服务端" class="headerlink" title="1.3、服务端"></a>1.3、服务端</h3><p>服务端需要继承 <code>BnInterface</code>，<code>BnInterface</code> 也是个模板类，作用其实是使服务端对象继承自模板对象，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/IInterface.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BnInterface</span> : <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BBinder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> sp&lt;IInterface&gt;      <span class="title">queryLocalInterface</span><span class="params">(<span class="type">const</span> String16&amp; _descriptor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">const</span> String16&amp;     <span class="title">getInterfaceDescriptor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> INTERFACE           BaseInterface;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="1-4、重要宏定义"><a href="#1-4、重要宏定义" class="headerlink" title="1.4、重要宏定义"></a>1.4、重要宏定义</h3><p>Android 提供了两个重要的宏，方便Binder接口的同一实现。需要以 <code>I</code> 开头加上传入的接口变量来做声明&#x2F;实现。</p>
<h4 id="1-4-1、DECLARE-META-INTERFACE：声明接口构造"><a href="#1-4-1、DECLARE-META-INTERFACE：声明接口构造" class="headerlink" title="1.4.1、DECLARE_META_INTERFACE：声明接口构造"></a>1.4.1、DECLARE_META_INTERFACE：声明接口构造</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/IInterface.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_META_INTERFACE(INTERFACE)                               \</span></span><br><span class="line"><span class="meta">public:                                                                 \</span></span><br><span class="line"><span class="meta">    static const ::android::String16 descriptor;                        \</span></span><br><span class="line"><span class="meta">    static ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> asInterface(                     \</span></span><br><span class="line"><span class="meta">            const ::android::sp<span class="string">&lt;::android::IBinder&gt;</span>&amp; obj);              \</span></span><br><span class="line"><span class="meta">    virtual const ::android::String16&amp; getInterfaceDescriptor() const;  \</span></span><br><span class="line"><span class="meta">    I##INTERFACE();                                                     \</span></span><br><span class="line"><span class="meta">    virtual ~I##INTERFACE();                                            \</span></span><br><span class="line"><span class="meta">    static bool setDefaultImpl(std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span> impl);     \</span></span><br><span class="line"><span class="meta">    static const std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span>&amp; getDefaultImpl();       \</span></span><br><span class="line"><span class="meta">private:                                                                \</span></span><br><span class="line"><span class="meta">    static std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span> default_impl;                  \</span></span><br><span class="line"><span class="meta">public:                                                                 \</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-2、IMPLEMENT-META-INTERFACE：实现接口构造"><a href="#1-4-2、IMPLEMENT-META-INTERFACE：实现接口构造" class="headerlink" title="1.4.2、IMPLEMENT_META_INTERFACE：实现接口构造"></a>1.4.2、IMPLEMENT_META_INTERFACE：实现接口构造</h4><p>和 <code>DECLARE_META_INTERFACE</code> 声明对应，实现其声明的接口构造和变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/IInterface.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DO_NOT_CHECK_MANUAL_BINDER_INTERFACES</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \</span></span><br><span class="line"><span class="meta">    static_assert(internal::allowedManualInterface(NAME),               \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;b/64223827: Manually written binder interfaces are &quot;</span> \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;considered error prone and frequently have bugs. &quot;</span>   \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;The preferred way to add interfaces is to define &quot;</span>   \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;an .aidl file to auto-generate the interface. If &quot;</span>   \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;an interface must be manually written, add its &quot;</span>     \</span></span><br><span class="line"><span class="meta">                  <span class="string">&quot;name to the whitelist.&quot;</span>);                            \</span></span><br><span class="line"><span class="meta">    DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)    \</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \</span></span><br><span class="line"><span class="meta">    DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)    \</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE(INTERFACE, NAME)\</span></span><br><span class="line"><span class="meta">    const ::android::StaticString16                                     \</span></span><br><span class="line"><span class="meta">        I##INTERFACE##_descriptor_static_str16(__IINTF_CONCAT(u, NAME));\</span></span><br><span class="line"><span class="meta">    const ::android::String16 I##INTERFACE::descriptor(                 \</span></span><br><span class="line"><span class="meta">        I##INTERFACE##_descriptor_static_str16);                        \</span></span><br><span class="line"><span class="meta">    const ::android::String16&amp;                                          \</span></span><br><span class="line"><span class="meta">            I##INTERFACE::getInterfaceDescriptor() const &#123;              \</span></span><br><span class="line"><span class="meta">        return I##INTERFACE::descriptor;                                \</span></span><br><span class="line"><span class="meta">    &#125;                                                                   \</span></span><br><span class="line"><span class="meta">    ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> I##INTERFACE::asInterface(              \</span></span><br><span class="line"><span class="meta">            const ::android::sp<span class="string">&lt;::android::IBinder&gt;</span>&amp; obj)               \</span></span><br><span class="line"><span class="meta">    &#123;                                                                   \</span></span><br><span class="line"><span class="meta">        ::android::sp<span class="string">&lt;I##INTERFACE&gt;</span> intr;                               \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (obj != nullptr) &#123;                                           \</span></span><br><span class="line"><span class="meta">            intr = static_cast<span class="string">&lt;I##INTERFACE*&gt;</span>(                          \</span></span><br><span class="line"><span class="meta">                obj-&gt;queryLocalInterface(                               \</span></span><br><span class="line"><span class="meta">                        I##INTERFACE::descriptor).get());               \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (intr == nullptr) &#123;                                      \</span></span><br><span class="line"><span class="meta">                intr = new Bp##INTERFACE(obj);                          \</span></span><br><span class="line"><span class="meta">            &#125;                                                           \</span></span><br><span class="line"><span class="meta">        &#125;                                                               \</span></span><br><span class="line"><span class="meta">        return intr;                                                    \</span></span><br><span class="line"><span class="meta">    &#125;                                                                   \</span></span><br><span class="line"><span class="meta">    std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span> I##INTERFACE::default_impl;           \</span></span><br><span class="line"><span class="meta">    bool I##INTERFACE::setDefaultImpl(std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span> impl)\</span></span><br><span class="line"><span class="meta">    &#123;                                                                   \</span></span><br><span class="line"><span class="meta">        <span class="comment">/* Only one user of this interface can use this function     */</span> \</span></span><br><span class="line"><span class="meta">        <span class="comment">/* at a time. This is a heuristic to detect if two different */</span> \</span></span><br><span class="line"><span class="meta">        <span class="comment">/* users in the same process use this function.              */</span> \</span></span><br><span class="line"><span class="meta">        assert(!I##INTERFACE::default_impl);                            \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (impl) &#123;                                                     \</span></span><br><span class="line"><span class="meta">            I##INTERFACE::default_impl = std::move(impl);               \</span></span><br><span class="line"><span class="meta">            return true;                                                \</span></span><br><span class="line"><span class="meta">        &#125;                                                               \</span></span><br><span class="line"><span class="meta">        return false;                                                   \</span></span><br><span class="line"><span class="meta">    &#125;                                                                   \</span></span><br><span class="line"><span class="meta">    const std::unique_ptr<span class="string">&lt;I##INTERFACE&gt;</span>&amp; I##INTERFACE::getDefaultImpl() \</span></span><br><span class="line"><span class="meta">    &#123;                                                                   \</span></span><br><span class="line"><span class="meta">        return I##INTERFACE::default_impl;                              \</span></span><br><span class="line"><span class="meta">    &#125;                                                                   \</span></span><br><span class="line"><span class="meta">    I##INTERFACE::I##INTERFACE() &#123; &#125;                                    \</span></span><br><span class="line"><span class="meta">    I##INTERFACE::~I##INTERFACE() &#123; &#125;                                   \</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5、interface-cast"><a href="#1-5、interface-cast" class="headerlink" title="1.5、interface_cast()"></a>1.5、interface_cast()</h3><p><code>interface_cast()</code> 函数可以方便的将 Binder 对象转换为对应的客户端接口，其实现是调用 <code>INTERFACE</code> 的 <code>asInterface()</code> 函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frameworks/native/libs/binder/include/binder/IInterface.h</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> sp&lt;INTERFACE&gt; <span class="title">interface_cast</span><span class="params">(<span class="type">const</span> sp&lt;IBinder&gt;&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INTERFACE::<span class="built_in">asInterface</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>asInterface()</code> 函数是通过宏 <code>IMPLEMENT_META_INTERFACE</code> 实现的，会返回与接口对应的 <code>Bp##INTERFACE()</code> 对象，我们自定义的客户端对象便是在这里得到调用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">::android::sp&lt;I##INTERFACE&gt; I##INTERFACE::<span class="built_in">asInterface</span>(              \</span><br><span class="line">        <span class="type">const</span> ::android::sp&lt;::android::IBinder&gt;&amp; obj)               \</span><br><span class="line">&#123;                                                                   \</span><br><span class="line">    ::android::sp&lt;I##INTERFACE&gt; intr;                               \</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">nullptr</span>) &#123;                                           \</span><br><span class="line">        intr = <span class="built_in">static_cast</span>&lt;I##INTERFACE*&gt;(                          \</span><br><span class="line">            obj-&gt;<span class="built_in">queryLocalInterface</span>(                               \</span><br><span class="line">                    I##INTERFACE::descriptor).<span class="built_in">get</span>());               \</span><br><span class="line">        <span class="keyword">if</span> (intr == <span class="literal">nullptr</span>) &#123;                                      \</span><br><span class="line">            intr = <span class="keyword">new</span> Bp##<span class="built_in">INTERFACE</span>(obj);                          \</span><br><span class="line">        &#125;                                                           \</span><br><span class="line">    &#125;                                                               \</span><br><span class="line">    <span class="keyword">return</span> intr;                                                    \</span><br><span class="line">&#125;                                                                   \</span><br></pre></td></tr></table></figure>

<h2 id="2、示例实现"><a href="#2、示例实现" class="headerlink" title="2、示例实现"></a>2、示例实现</h2><p><strong>目录结构如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Android.bp</span><br><span class="line">├── client</span><br><span class="line">│   ├── BpCalculator.cpp</span><br><span class="line">│   ├── BpCalculator.h</span><br><span class="line">│   └── calculator_client.cpp</span><br><span class="line">├── common</span><br><span class="line">│   ├── ICalculator.cpp</span><br><span class="line">│   └── ICalculator.h</span><br><span class="line">└── server</span><br><span class="line">    ├── BnCalculator.cpp</span><br><span class="line">    ├── BnCalculator.h</span><br><span class="line">    ├── calculator_server.cpp</span><br><span class="line">    ├── CalculatorService.cpp</span><br><span class="line">    └── CalculatorService.h</span><br></pre></td></tr></table></figure>

<h3 id="2-1、common-模块"><a href="#2-1、common-模块" class="headerlink" title="2.1、common 模块"></a>2.1、common 模块</h3><h4 id="2-1-1、ICalculator-h"><a href="#2-1-1、ICalculator-h" class="headerlink" title="2.1.1、ICalculator.h"></a>2.1.1、ICalculator.h</h4><p>定义 <code>ICalculator</code> 接口，继承自 <code>IInterface</code> ，用于提供 C&#x2F;S 的统一接口。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IInterface.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVICE_NAME <span class="string">&quot;android.test.calculator&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123; <span class="comment">// 接口的通信标识</span></span><br><span class="line">    TRANSACTION_add = IBinder::FIRST_CALL_TRANSACTION + <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ICalculator</span>: <span class="keyword">public</span> IInterface <span class="comment">// 继承自IInterface，用于提供C/S的统一接口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DECLARE_META_INTERFACE</span>(Calculator); <span class="comment">// 宏定义</span></span><br><span class="line">    <span class="comment">// 定义公共接口</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">subtract</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">multiply</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">float</span>   <span class="title">divide</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;; <span class="comment">// class ICalculator</span></span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2、ICalculator-cpp"><a href="#2-1-2、ICalculator-cpp" class="headerlink" title="2.1.2、ICalculator.cpp"></a>2.1.2、ICalculator.cpp</h4><p>利用宏 <code>IMPLEMENT_META_INTERFACE</code> 实现 <code>ICalculator</code> 接口构造和变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ICalculator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../client/BpCalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宏定义的实现</span></span><br><span class="line">    <span class="built_in">IMPLEMENT_META_INTERFACE</span>(Calculator, SERVICE_NAME);</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2、server-模块"><a href="#2-2、server-模块" class="headerlink" title="2.2、server 模块"></a>2.2、server 模块</h3><h4 id="2-2-1、BnCalculator-h"><a href="#2-2-1、BnCalculator-h" class="headerlink" title="2.2.1、BnCalculator.h"></a>2.2.1、BnCalculator.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../common/ICalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BnCalculator</span>: <span class="keyword">public</span> BnInterface&lt;ICalculator&gt; <span class="comment">// 继承 BnInterface</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// onTransact 此函数在 BnCalculator.cpp 中具体实现，它用于处理来自 client 端对应的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">status_t</span> <span class="title">onTransact</span><span class="params">(<span class="type">uint32_t</span> code, <span class="type">const</span> Parcel &amp;data, Parcel *reply, <span class="type">uint32_t</span> flags = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;<span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2、BnCalculator-cpp"><a href="#2-2-2、BnCalculator-cpp" class="headerlink" title="2.2.2、BnCalculator.cpp"></a>2.2.2、BnCalculator.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/Parcel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BnCalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;BnCalculator&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 BnCalculator 的 onTransact 实现，还会在后面其子类 CalculatorService 中重写此方法</span></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">BnCalculator::onTransact</span><span class="params">(<span class="type">uint32_t</span> code, <span class="type">const</span> Parcel &amp;data, Parcel *reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(code)&#123;</span><br><span class="line">        <span class="keyword">case</span> TRANSACTION_add: &#123; <span class="comment">// 在 ICalculator.h 接口中定义</span></span><br><span class="line">            <span class="built_in">CHECK_INTERFACE</span>(ICalculator, data, reply);<span class="comment">// 检查接口</span></span><br><span class="line">            <span class="type">int32_t</span> a;</span><br><span class="line">            <span class="type">int32_t</span> b;</span><br><span class="line">            data.<span class="built_in">readInt32</span>(&amp;a);</span><br><span class="line">            data.<span class="built_in">readInt32</span>(&amp;b);</span><br><span class="line">            <span class="built_in">ALOGI</span>(<span class="string">&quot;add() : a = %d, b = %d \n&quot;</span>, a, b);</span><br><span class="line">            reply-&gt;<span class="built_in">writeInt32</span>(<span class="built_in">add</span>(a, b)); <span class="comment">// 这里调用执行我们定义的 add 函数</span></span><br><span class="line">            <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> BBinder::<span class="built_in">onTransact</span>(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3、CalculatorService-h"><a href="#2-2-3、CalculatorService-h" class="headerlink" title="2.2.3、CalculatorService.h"></a>2.2.3、CalculatorService.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/Parcel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BnCalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorService</span>: <span class="keyword">public</span> BnCalculator <span class="comment">// 继承 BnCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">instantiate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">status_t</span> <span class="title">onTransact</span><span class="params">(<span class="type">uint32_t</span> code, <span class="type">const</span> Parcel &amp;data, Parcel *reply, <span class="type">uint32_t</span> flags = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现接口 ICalculator 的函数，这些是我们自己需要实现的一些功能函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">CalculatorService</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CalculatorService</span>();</span><br><span class="line">&#125;; <span class="comment">// class CalculatorService</span></span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-4、CalculatorService-cpp"><a href="#2-2-4、CalculatorService-cpp" class="headerlink" title="2.2.4、CalculatorService.cpp"></a>2.2.4、CalculatorService.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;CalculatorService.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;CalculatorService&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数是将自己注册进 servicemanager</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CalculatorService::instantiate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">defaultServiceManager</span>()-&gt;<span class="built_in">addService</span>(<span class="built_in">String16</span>(SERVICE_NAME), <span class="keyword">new</span> CalculatorService);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是我们要实现的功能，其在 BnCalculator 的 onTransact 中被调用</span></span><br><span class="line"><span class="function"><span class="type">int32_t</span> <span class="title">CalculatorService::add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int32_t</span> ans = a + b;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;add() : a = %d, b = %d, ans = %d\n&quot;</span>, a, b, ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService: a = %d, b = %d, ans = %d\n&quot;</span>, a, b, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalculatorService::<span class="built_in">CalculatorService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService is created&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService is created\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">CalculatorService::~<span class="built_in">CalculatorService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService is destroyed&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService is destroyed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">CalculatorService::onTransact</span><span class="params">(<span class="type">uint32_t</span> code, <span class="type">const</span> Parcel &amp;data, Parcel *reply, <span class="type">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService onTransact&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService onTransact\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> BnCalculator::<span class="built_in">onTransact</span>(code, data, reply, flags); <span class="comment">// 调用父类 BnCalculator 的 onTransact 函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-5、calculator-server-cpp"><a href="#2-2-5、calculator-server-cpp" class="headerlink" title="2.2.5、calculator_server.cpp"></a>2.2.5、calculator_server.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;binder/ProcessState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;CalculatorService.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;calculator_server&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CalculatorService::<span class="built_in">instantiate</span>();<span class="comment">// 注册进servicemanager中</span></span><br><span class="line">    <span class="comment">// 开启线程池，接收处理 Client 发送的进程间通信请求</span></span><br><span class="line">    ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">startThreadPool</span>();</span><br><span class="line">    IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">joinThreadPool</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、client-模块"><a href="#2-3、client-模块" class="headerlink" title="2.3、client 模块"></a>2.3、client 模块</h3><h4 id="2-3-1、BpCalculator-h"><a href="#2-3-1、BpCalculator-h" class="headerlink" title="2.3.1、BpCalculator.h"></a>2.3.1、BpCalculator.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../common/ICalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BpCalculator</span>: <span class="keyword">public</span> BpInterface&lt;ICalculator&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BpCalculator</span>(<span class="type">const</span> sp&lt;IBinder&gt;&amp; impl);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2、BpCalculator-cpp"><a href="#2-3-2、BpCalculator-cpp" class="headerlink" title="2.3.2、BpCalculator.cpp"></a>2.3.2、BpCalculator.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/Parcel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BpCalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;BpCalculator&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int32_t</span> <span class="title">BpCalculator::add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;add() : a = %d, b = %d&quot;</span>, a, b);</span><br><span class="line">    Parcel data, reply;</span><br><span class="line">    <span class="type">int32_t</span> ans;</span><br><span class="line">    data.<span class="built_in">writeInterfaceToken</span>(ICalculator::<span class="built_in">getInterfaceDescriptor</span>());</span><br><span class="line">    data.<span class="built_in">writeInt32</span>(a);</span><br><span class="line">    data.<span class="built_in">writeInt32</span>(b);</span><br><span class="line">    <span class="comment">// 通过 code 调用远程 add 方法，传递 data</span></span><br><span class="line">    <span class="type">status_t</span> status = <span class="built_in">remote</span>()-&gt;<span class="built_in">transact</span>(TRANSACTION_add, data, &amp;reply);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;add() error: %s&quot;</span>, <span class="built_in">strerror</span>(-status));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reply.<span class="built_in">readInt32</span>(&amp;ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;add() : ans = %d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BpCalculator::<span class="built_in">BpCalculator</span>(<span class="type">const</span> sp&lt;IBinder&gt;&amp; impl): <span class="built_in">BpInterface</span>&lt;ICalculator&gt;(impl)&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-3、calculator-client-cpp"><a href="#2-3-3、calculator-client-cpp" class="headerlink" title="2.3.3、calculator_client.cpp"></a>2.3.3、calculator_client.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/ProcessState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/RefBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../common/ICalculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;calculator_client&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;HelloWorldSevice client is starting now&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取 ServiceManager，从而得到远程 IBinder，实现通信</span></span><br><span class="line">    sp&lt;IServiceManager&gt; sm = <span class="built_in">defaultServiceManager</span>();</span><br><span class="line">    sp&lt;IBinder&gt; binder;</span><br><span class="line">    sp&lt;ICalculator&gt; sCalculator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        binder = sm-&gt;<span class="built_in">getService</span>(<span class="built_in">String16</span>(SERVICE_NAME));</span><br><span class="line">        <span class="keyword">if</span>(binder != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ALOGI</span>(<span class="string">&quot;Calculator is not working,waiting...&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Calculator is not working,waiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">500000</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    sCalculator = <span class="built_in">interface_cast</span>&lt;ICalculator&gt;(binder);</span><br><span class="line">    <span class="type">int32_t</span> ans = sCalculator-&gt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>)；</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;1 + 2 = %d&quot;</span>, ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 + 2 = %d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4、Android-bp"><a href="#2-4、Android-bp" class="headerlink" title="2.4、Android.bp"></a>2.4、Android.bp</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">cc_binary <span class="punctuation">&#123;</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;calculator_client&quot;</span><span class="punctuation">,</span></span><br><span class="line">    srcs<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;common/ICalculator.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;client/BpCalculator.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;client/calculator_client.cpp&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    shared_libs<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;libbinder&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;libcutils&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;liblog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;libutils&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    cflags<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-Wno-error=deprecated-declarations&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">cc_binary <span class="punctuation">&#123;</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;calculator_server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    srcs<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;common/ICalculator.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;server/BnCalculator.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;server/CalculatorService.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;server/calculator_server.cpp&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    shared_libs<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;libbinder&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;libcutils&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;liblog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;libutils&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    cflags<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-Wno-error=deprecated-declarations&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5、尝试使用"><a href="#2-5、尝试使用" class="headerlink" title="2.5、尝试使用"></a>2.5、尝试使用</h3><h4 id="2-5-1、启动-calculator-server"><a href="#2-5-1、启动-calculator-server" class="headerlink" title="2.5.1、启动 calculator_server"></a>2.5.1、启动 calculator_server</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console:/ # calculator_server &amp;</span><br><span class="line">[1] 16646</span><br><span class="line">CalculatorService is created</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01-22 23:16:30.180 16646 16646 I CalculatorService: CalculatorService is created</span><br></pre></td></tr></table></figure>

<h4 id="2-5-2、启动-calculator-client"><a href="#2-5-2、启动-calculator-client" class="headerlink" title="2.5.2、启动 calculator_client"></a>2.5.2、启动 calculator_client</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console:/ # calculator_client</span><br><span class="line">CalculatorService onTransact</span><br><span class="line">CalculatorService: a = 1, b = 2, ans = 3</span><br><span class="line">1 + 2 = 3</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01-22 23:16:35.495 16648 16648 I calculator_client: HelloWorldSevice client is starting now</span><br><span class="line">01-22 23:16:35.496 16648 16648 I BpCalculator: add() : a = 1, b = 2</span><br><span class="line">01-22 23:16:35.496 16646 16647 I CalculatorService: CalculatorService onTransact</span><br><span class="line">01-22 23:16:35.496 16646 16647 I BnCalculator: add() : a = 1, b = 2</span><br><span class="line">01-22 23:16:35.497 16646 16647 I CalculatorService: add() : a = 1, b = 2, ans = 3</span><br><span class="line">01-22 23:16:35.497 16648 16648 I BpCalculator: add() : ans = 3</span><br><span class="line">01-22 23:16:35.497 16648 16648 I calculator_client: 1 + 2 = 3</span><br></pre></td></tr></table></figure>

<p>我们可以在日志中看见 client 端发出请求到 server 端处理请求的相关流程。</p>
<h2 id="3、使用-aidl-工具生成"><a href="#3、使用-aidl-工具生成" class="headerlink" title="3、使用 aidl 工具生成"></a>3、使用 aidl 工具生成</h2><p>我们可以使用 AndroidSdk 或源码中的 aidl 编译工具便捷生成 C++ Binder 相关通用代码，简化开发流程。</p>
<h3 id="3-1、aidl-编译工具"><a href="#3-1、aidl-编译工具" class="headerlink" title="3.1、aidl 编译工具"></a>3.1、aidl 编译工具</h3><p>即 <code>aidl</code> 命令，AndroidSdk 或者 Android 源码中都有。</p>
<p>sdk中aidl，需要把路径添加到 path 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Android/Sdk/build-tools/33.0.2/aidl</span><br></pre></td></tr></table></figure>

<p>源码中 aidl，设置源码编译环境后（<code>source build/envsetup.sh</code>），自动添加到 path 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">out/soong/host/linux-x86/bin/aidl</span><br></pre></td></tr></table></figure>

<p>输入 <code>aidl --help</code> 命令可以查看帮助信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aidl --help</span><br><span class="line">usage:</span><br><span class="line">aidl --lang=&#123;java|cpp|ndk&#125; [OPTION]... INPUT...</span><br><span class="line">   Generate Java or C++ files for AIDL file(s).</span><br><span class="line"></span><br><span class="line">aidl --preprocess OUTPUT INPUT...</span><br><span class="line">   Create an AIDL file having declarations of AIDL file(s).</span><br><span class="line"></span><br><span class="line">aidl --dumpapi --out=DIR INPUT...</span><br><span class="line">   Dump API signature of AIDL file(s) to DIR.</span><br><span class="line"></span><br><span class="line">aidl --checkapi OLD_DIR NEW_DIR</span><br><span class="line">   Checkes whether API dump NEW_DIR is backwards compatible extension</span><br><span class="line">   of the API dump OLD_DIR.</span><br><span class="line"></span><br><span class="line">aidl [OPTION]... INPUT [OUTPUT]</span><br><span class="line">   Generate a Java file for an AIDL file.</span><br><span class="line"></span><br><span class="line">OPTION:</span><br><span class="line">  -I DIR, --include=DIR</span><br><span class="line">          Use DIR as a search path for import statements.</span><br><span class="line">  -m FILE, --import=FILE</span><br><span class="line">          Import FILE directly without searching in the search paths.</span><br><span class="line">  -p FILE, --preprocessed=FILE</span><br><span class="line">          Include FILE which is created by --preprocess.</span><br><span class="line">  -d FILE, --dep=FILE</span><br><span class="line">          Generate dependency file as FILE. Don&#x27;t use this when</span><br><span class="line">          there are multiple input files. Use -a then.</span><br><span class="line">  -o DIR, --out=DIR</span><br><span class="line">          Use DIR as the base output directory for generated files.</span><br><span class="line">  -h DIR, --header_out=DIR</span><br><span class="line">          Generate C++ headers under DIR.</span><br><span class="line">  -a</span><br><span class="line">          Generate dependency file next to the output file with the</span><br><span class="line">          name based on the input file.</span><br><span class="line">  -b</span><br><span class="line">          Trigger fail when trying to compile a parcelable.</span><br><span class="line">  --ninja</span><br><span class="line">          Generate dependency file in a format ninja understands.</span><br><span class="line">  --structured</span><br><span class="line">          Whether this interface is defined exclusively in AIDL.</span><br><span class="line">          It is therefore a candidate for stabilization.</span><br><span class="line">  --stability=&lt;level&gt;</span><br><span class="line">          The stability requirement of this interface.</span><br><span class="line">  -t, --trace</span><br><span class="line">          Include tracing code for systrace. Note that if either</span><br><span class="line">          the client or service code is not auto-generated by this</span><br><span class="line">          tool, that part will not be traced.</span><br><span class="line">  --transaction_names</span><br><span class="line">          Generate transaction names.</span><br><span class="line">  --apimapping</span><br><span class="line">          Generates a mapping of declared aidl method signatures to</span><br><span class="line">          the original line number. e.g.:</span><br><span class="line">              If line 39 of foo/bar/IFoo.aidl contains:              void doFoo(int bar, String baz);</span><br><span class="line">              Then the result would be:</span><br><span class="line">              foo.bar.Baz|doFoo|int,String,|void</span><br><span class="line">              foo/bar/IFoo.aidl:39</span><br><span class="line">  -v VER, --version=VER</span><br><span class="line">          Set the version of the interface and parcelable to VER.</span><br><span class="line">          VER must be an interger greater than 0.</span><br><span class="line">  --hash=HASH</span><br><span class="line">          Set the interface hash to HASH.</span><br><span class="line">  --log</span><br><span class="line">          Information about the transaction, e.g., method name, argument</span><br><span class="line">          values, execution time, etc., is provided via callback.</span><br><span class="line">  --parcelable-to-string</span><br><span class="line">          Generates an implementation of toString() for Java parcelables,</span><br><span class="line">          and ostream&amp; operator &lt;&lt; for C++ parcelables.</span><br><span class="line">  --help</span><br><span class="line">          Show this help.</span><br><span class="line"></span><br><span class="line">INPUT:</span><br><span class="line">  An AIDL file.</span><br><span class="line"></span><br><span class="line">OUTPUT:</span><br><span class="line">  Path to the generated Java or C++ source file. This is ignored when</span><br><span class="line">  -o or --out is specified or the number of the input files are</span><br><span class="line">  more than one.</span><br><span class="line">  For Java, if omitted, Java source file is generated at the same</span><br><span class="line">  place as the input AIDL file,</span><br><span class="line"></span><br><span class="line">HEADER_DIR:</span><br><span class="line">  Path to where C++ headers are generated.</span><br></pre></td></tr></table></figure>

<h3 id="3-2、生成-C-接口文件"><a href="#3-2、生成-C-接口文件" class="headerlink" title="3.2、生成 C++ 接口文件"></a>3.2、生成 C++ 接口文件</h3><p>目录结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/calculator/</span><br><span class="line">└── ICalculator.aidl</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Calculator.aidl</span><br><span class="line"></span><br><span class="line">interface ICalculator &#123;</span><br><span class="line">    int add(in int a, in int b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入命令生成接口文件至 common 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aidl --lang=cpp -h vendor/calculator/common -o vendor/calculator/common vendor/calculator/ICalculator.aidl</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/calculator/</span><br><span class="line">├── common</span><br><span class="line">│   ├── BnCalculator.h</span><br><span class="line">│   ├── BpCalculator.h</span><br><span class="line">│   ├── ICalculator.cpp</span><br><span class="line">│   └── ICalculator.h</span><br><span class="line">└── ICalculator.aidl</span><br></pre></td></tr></table></figure>

<p>可以看见生成了 <code>ICalculator.h</code>，<code>ICalculator.cpp</code>，<code>BnCalculator.h</code> 和 <code>BpCalculator.h</code> 文件。</p>
<h3 id="3-3、设置-SERVICE-NAME"><a href="#3-3、设置-SERVICE-NAME" class="headerlink" title="3.3、设置 SERVICE_NAME"></a>3.3、设置 SERVICE_NAME</h3><p>打开 <code>ICalculator.cpp</code> 可以默认生成的服务名称是 ICalculator</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span>(Calculator, <span class="string">&quot;ICalculator&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们在 <code>ICalculator.h</code> 自定义 <code>SERVICE_NAME</code> 并修改 <code>ICalculator.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vendor/calculator/common/ICalculator.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVICE_NAME <span class="string">&quot;android.test.calculator&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vendor/calculator/common/ICalculator.cpp</span></span><br><span class="line"><span class="built_in">DO_NOT_DIRECTLY_USE_ME_IMPLEMENT_META_INTERFACE</span>(Calculator, SERVICE_NAME)</span><br></pre></td></tr></table></figure>

<h3 id="3-4、Client-Server-模块"><a href="#3-4、Client-Server-模块" class="headerlink" title="3.4、Client &amp; Server 模块"></a>3.4、Client &amp; Server 模块</h3><p>同前面我们的手动实现，编写 Client 和 Server 相关代码，目录结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/calculator/</span><br><span class="line">├── client</span><br><span class="line">│   └── calculator_client.cpp</span><br><span class="line">├── common</span><br><span class="line">│   ├── BnCalculator.h</span><br><span class="line">│   ├── BpCalculator.h</span><br><span class="line">│   ├── ICalculator.cpp</span><br><span class="line">│   └── ICalculator.h</span><br><span class="line">├── ICalculator.aidl</span><br><span class="line">└── server</span><br><span class="line">    ├── calculator_server.cpp</span><br><span class="line">    ├── CalculatorService.cpp</span><br><span class="line">    └── CalculatorService.h</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意！需要修改符合 aidl 格式，如下：</strong></p>
</blockquote>
<h4 id="3-4-1、CalculatorService-h"><a href="#3-4-1、CalculatorService-h" class="headerlink" title="3.4.1、CalculatorService.h"></a>3.4.1、CalculatorService.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/Parcel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;BnCalculator.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorService</span>: <span class="keyword">public</span> BnCalculator <span class="comment">// 继承 BnCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">instantiate</span><span class="params">()</span></span>;</span><br><span class="line">    ::<span class="function">android::<span class="type">status_t</span> <span class="title">onTransact</span><span class="params">(<span class="type">uint32_t</span> _aidl_code, <span class="type">const</span> ::android::Parcel&amp; _aidl_data, ::android::Parcel* _aidl_reply, <span class="type">uint32_t</span> _aidl_flags)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现接口 ICalculator 的函数，这些是我们自己需要实现的一些功能函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ::android::<span class="function">binder::Status <span class="title">add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b, <span class="type">int32_t</span>* _aidl_return)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">CalculatorService</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CalculatorService</span>();</span><br><span class="line">&#125;; <span class="comment">// class CalculatorService</span></span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-2、CalculatorService-cpp"><a href="#3-4-2、CalculatorService-cpp" class="headerlink" title="3.4.2、CalculatorService.cpp"></a>3.4.2、CalculatorService.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CalculatorService.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;CalculatorService&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数是将自己注册进 servicemanager</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CalculatorService::instantiate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">defaultServiceManager</span>()-&gt;<span class="built_in">addService</span>(<span class="built_in">String16</span>(SERVICE_NAME), <span class="keyword">new</span> CalculatorService);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是我们要实现的功能，其在 BnCalculator 的 onTransact 中被调用</span></span><br><span class="line">::android::<span class="function">binder::Status <span class="title">CalculatorService::add</span><span class="params">(<span class="type">int32_t</span> a, <span class="type">int32_t</span> b, <span class="type">int32_t</span>* _aidl_return)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *_aidl_return = a + b;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;add() : a = %d, b = %d, ans = %d\n&quot;</span>, a, b, *_aidl_return);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService: a = %d, b = %d, ans = %d\n&quot;</span>, a, b, *_aidl_return);</span><br><span class="line">    <span class="keyword">return</span> ::android::binder::Status::<span class="built_in">ok</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalculatorService::<span class="built_in">CalculatorService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService is created&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService is created\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">CalculatorService::~<span class="built_in">CalculatorService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService is destroyed&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService is destroyed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="function">android::<span class="type">status_t</span> <span class="title">CalculatorService::onTransact</span><span class="params">(<span class="type">uint32_t</span> _aidl_code, <span class="type">const</span> ::android::Parcel&amp; _aidl_data, ::android::Parcel* _aidl_reply, <span class="type">uint32_t</span> _aidl_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;CalculatorService onTransact&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CalculatorService onTransact\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> BnCalculator::<span class="built_in">onTransact</span>(_aidl_code, _aidl_data, _aidl_reply, _aidl_flags); <span class="comment">// 调用父类 BnCalculator 的 onTransact 函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// namespace android</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-3、calculator-client-cpp"><a href="#3-4-3、calculator-client-cpp" class="headerlink" title="3.4.3、calculator_client.cpp"></a>3.4.3、calculator_client.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;binder/ProcessState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils/RefBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ICalculator.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;calculator_client&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ALOGI</span>(<span class="string">&quot;HelloWorldSevice client is starting now&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取 ServiceManager，从而得到远程 IBinder，实现通信</span></span><br><span class="line">    sp&lt;IServiceManager&gt; sm = <span class="built_in">defaultServiceManager</span>();</span><br><span class="line">    sp&lt;IBinder&gt; binder;</span><br><span class="line">    sp&lt;ICalculator&gt; sCalculator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        binder = sm-&gt;<span class="built_in">getService</span>(<span class="built_in">String16</span>(SERVICE_NAME));</span><br><span class="line">        <span class="keyword">if</span>(binder != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ALOGI</span>(<span class="string">&quot;Calculator is not working,waiting...&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Calculator is not working,waiting...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">500000</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    sCalculator = <span class="built_in">interface_cast</span>&lt;ICalculator&gt;(binder);</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> ans;</span><br><span class="line">    ::android::binder::Status status = sCalculator-&gt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>, &amp;ans);</span><br><span class="line">    <span class="keyword">if</span>(status.<span class="built_in">isOk</span>()) &#123;</span><br><span class="line">        <span class="built_in">ALOGI</span>(<span class="string">&quot;1 + 2 = %d&quot;</span>, ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;calculator_client 1 + 2 = %d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5、Android-bp"><a href="#3-5、Android-bp" class="headerlink" title="3.5、Android.bp"></a>3.5、Android.bp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cc_library &#123;</span><br><span class="line">    name: <span class="string">&quot;libcalculator&quot;</span>,</span><br><span class="line">    include_dirs: [</span><br><span class="line">        <span class="string">&quot;common&quot;</span></span><br><span class="line">    ], </span><br><span class="line">    srcs: [</span><br><span class="line">        <span class="string">&quot;common/ICalculator.cpp&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    shared_libs: [</span><br><span class="line">        <span class="string">&quot;libbinder&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libcutils&quot;</span>,</span><br><span class="line">        <span class="string">&quot;liblog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libutils&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    export_include_dirs: [<span class="string">&quot;common&quot;</span>],</span><br><span class="line">    cflags: [</span><br><span class="line">        <span class="string">&quot;-Wno-error=deprecated-declarations&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc_binary &#123;</span><br><span class="line">    name: <span class="string">&quot;calculator_client&quot;</span>,</span><br><span class="line">    srcs: [</span><br><span class="line">        <span class="string">&quot;client/calculator_client.cpp&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    shared_libs: [</span><br><span class="line">        <span class="string">&quot;libbinder&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libcutils&quot;</span>,</span><br><span class="line">        <span class="string">&quot;liblog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libutils&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libcalculator&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    cflags: [</span><br><span class="line">        <span class="string">&quot;-Wno-error=deprecated-declarations&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc_binary &#123;</span><br><span class="line">    name: <span class="string">&quot;calculator_server&quot;</span>,</span><br><span class="line">    srcs: [</span><br><span class="line">        <span class="string">&quot;server/CalculatorService.cpp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;server/calculator_server.cpp&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    shared_libs: [</span><br><span class="line">        <span class="string">&quot;libbinder&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libcutils&quot;</span>,</span><br><span class="line">        <span class="string">&quot;liblog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libutils&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libcalculator&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    cflags: [</span><br><span class="line">        <span class="string">&quot;-Wno-error=deprecated-declarations&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
        <category>native</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Binder</tag>
      </tags>
  </entry>
  <entry>
    <title>Android P&amp;Q&amp;R&amp;S User 版本开启 adb root 权限</title>
    <url>/posts/6ba1/</url>
    <content><![CDATA[<h1 id="Android-P-Q-R-S-User-版本开启-adb-root-权限"><a href="#Android-P-Q-R-S-User-版本开启-adb-root-权限" class="headerlink" title="Android P&amp;Q&amp;R&amp;S User 版本开启 adb root 权限"></a>Android P&amp;Q&amp;R&amp;S User 版本开启 adb root 权限</h1><blockquote>
<p><strong>注意：</strong>本方法在 R 和 S 上验证可行，P 和 Q 虽未验证，但应该也是可以的。</p>
</blockquote>
<h3 id="1、修改-build-make-core-main-mk-文件："><a href="#1、修改-build-make-core-main-mk-文件：" class="headerlink" title="1、修改 build/make/core/main.mk 文件："></a>1、修改 <code>build/make/core/main.mk</code> 文件：</h3><p>主要原理为修改系统相关属性使得 adb 具有 root 权限，使用到的属性如下：</p>
<table>
<thead>
<tr>
<th align="left">property</th>
<th align="left">description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ro.secure</td>
<td align="left">0：开启 root 权限<br />1：关闭 root 权限</td>
</tr>
<tr>
<td align="left">ro.adb.secure</td>
<td align="left">0：关闭 adb RSA 指纹认证<br />1：开启 adb RSA 指纹认证</td>
</tr>
<tr>
<td align="left">ro.debuggable</td>
<td align="left">0：关闭adb debug<br />1：开启adb debug</td>
</tr>
</tbody></table>
<h4 id="1-1、Android-R-可参考如下示例修改："><a href="#1-1、Android-R-可参考如下示例修改：" class="headerlink" title="1.1、Android R 可参考如下示例修改："></a>1.1、Android R 可参考如下示例修改：</h4><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/build/make/core/main.mk b/build/make/core/main.mk</span></span><br><span class="line"><span class="comment">index e3aed31868..ddbfdfef65 100755</span></span><br><span class="line"><span class="comment">--- a/build/make/core/main.mk</span></span><br><span class="line"><span class="comment">+++ b/build/make/core/main.mk</span></span><br><span class="line"><span class="meta">@@ -263,11 +263,11 @@</span> enable_target_debugging := true</span><br><span class="line"> tags_to_install :=</span><br><span class="line"> ifneq (,$(user_variant))</span><br><span class="line">   # Target is secure in user builds.</span><br><span class="line"><span class="deletion">-  ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1</span></span><br><span class="line"><span class="addition">+  ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=0</span></span><br><span class="line">   ADDITIONAL_DEFAULT_PROPERTIES += security.perf_harden=1</span><br><span class="line"></span><br><span class="line">   ifeq ($(user_variant),user)</span><br><span class="line"><span class="deletion">-    ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1</span></span><br><span class="line"><span class="addition">+    ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=0</span></span><br><span class="line">   endif</span><br><span class="line"></span><br><span class="line">   ifeq ($(user_variant),userdebug)</span><br><span class="line"><span class="meta">@@ -297,7 +297,7 @@</span> ifeq (true,$(strip $(enable_target_debugging)))</span><br><span class="line">   ADDITIONAL_BUILD_PROPERTIES += dalvik.vm.lockprof.threshold=500</span><br><span class="line"> else # !enable_target_debugging</span><br><span class="line">   # Target is less debuggable and adbd is off by default</span><br><span class="line"><span class="deletion">-  ADDITIONAL_DEFAULT_PROPERTIES += ro.debuggable=0</span></span><br><span class="line"><span class="addition">+  ADDITIONAL_DEFAULT_PROPERTIES += ro.debuggable=1</span></span><br><span class="line"> endif # !enable_target_debugging</span><br><span class="line"></span><br><span class="line"> ## eng ##</span><br></pre></td></tr></table></figure>

<h4 id="1-2、Android-S-可参考如下示例修改："><a href="#1-2、Android-S-可参考如下示例修改：" class="headerlink" title="1.2、Android S 可参考如下示例修改："></a>1.2、Android S 可参考如下示例修改：</h4><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/build/make/core/main.mk b/build/make/core/main.mk</span></span><br><span class="line"><span class="comment">index 3f53a09023..b92c152fe3 100644</span></span><br><span class="line"><span class="comment">--- a/build/make/core/main.mk</span></span><br><span class="line"><span class="comment">+++ b/build/make/core/main.mk</span></span><br><span class="line"><span class="meta">@@ -372,11 +372,11 @@</span> enable_target_debugging := true</span><br><span class="line"> tags_to_install :=</span><br><span class="line"> ifneq (,$(user_variant))</span><br><span class="line">   # Target is secure in user builds.</span><br><span class="line"><span class="deletion">-  ADDITIONAL_SYSTEM_PROPERTIES += ro.secure=1</span></span><br><span class="line"><span class="addition">+  ADDITIONAL_SYSTEM_PROPERTIES += ro.secure=0</span></span><br><span class="line">   ADDITIONAL_SYSTEM_PROPERTIES += security.perf_harden=1</span><br><span class="line"></span><br><span class="line">   ifeq ($(user_variant),user)</span><br><span class="line"><span class="deletion">-    ADDITIONAL_SYSTEM_PROPERTIES += ro.adb.secure=1</span></span><br><span class="line"><span class="addition">+    ADDITIONAL_SYSTEM_PROPERTIES += ro.adb.secure=0</span></span><br><span class="line">   endif</span><br><span class="line"></span><br><span class="line">   ifeq ($(user_variant),userdebug)</span><br><span class="line"><span class="meta">@@ -406,7 +406,7 @@</span> ifeq (true,$(strip $(enable_target_debugging)))</span><br><span class="line">   ADDITIONAL_SYSTEM_PROPERTIES += dalvik.vm.lockprof.threshold=500</span><br><span class="line"> else # !enable_target_debugging</span><br><span class="line">   # Target is less debuggable and adbd is off by default</span><br><span class="line"><span class="deletion">-  ADDITIONAL_SYSTEM_PROPERTIES += ro.debuggable=0</span></span><br><span class="line"><span class="addition">+  ADDITIONAL_SYSTEM_PROPERTIES += ro.debuggable=1</span></span><br><span class="line"> endif # !enable_target_debugging</span><br><span class="line"></span><br><span class="line"> ## eng ##</span><br></pre></td></tr></table></figure>

<h3 id="2、修改-system-core-init-selinux-cpp-文件，关闭-selinux："><a href="#2、修改-system-core-init-selinux-cpp-文件，关闭-selinux：" class="headerlink" title="2、修改 system/core/init/selinux.cpp 文件，关闭 selinux："></a>2、修改 <code>system/core/init/selinux.cpp</code> 文件，关闭 selinux：</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/system/core/init/selinux.cpp b/system/core/init/selinux.cpp</span></span><br><span class="line"><span class="comment">index 5a0255acd2..66cf23ee18 100644</span></span><br><span class="line"><span class="comment">--- a/system/core/init/selinux.cpp</span></span><br><span class="line"><span class="comment">+++ b/system/core/init/selinux.cpp</span></span><br><span class="line"><span class="meta">@@ -104,6 +104,7 @@</span> EnforcingStatus StatusFromCmdline() &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> bool IsEnforcing() &#123;</span><br><span class="line"><span class="addition">+    return false; //add to close selinux</span></span><br><span class="line">     if (ALLOW_PERMISSIVE_SELINUX) &#123;</span><br><span class="line">         return StatusFromCmdline() == SELINUX_ENFORCING;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、编译系统固件，烧录开发板，开机；"><a href="#3、编译系统固件，烧录开发板，开机；" class="headerlink" title="3、编译系统固件，烧录开发板，开机；"></a>3、编译系统固件，烧录开发板，开机；</h3><h3 id="4、如果开机-adb-连接不上，可能是没有打开-OTG-开关，打开-OTG-开关再尝试-adb-能否连接上设备；"><a href="#4、如果开机-adb-连接不上，可能是没有打开-OTG-开关，打开-OTG-开关再尝试-adb-能否连接上设备；" class="headerlink" title="4、如果开机 adb 连接不上，可能是没有打开 OTG 开关，打开 OTG 开关再尝试 adb 能否连接上设备；"></a>4、如果开机 adb 连接不上，可能是没有打开 OTG 开关，打开 OTG 开关再尝试 adb 能否连接上设备；</h3><h3 id="5、进入-adb-shell-，如果查看到-shell-提示符为-则表示具有-root-权限。"><a href="#5、进入-adb-shell-，如果查看到-shell-提示符为-则表示具有-root-权限。" class="headerlink" title="5、进入 adb shell ，如果查看到 shell 提示符为 # 则表示具有 root 权限。"></a>5、进入 <code>adb shell</code> ，如果查看到 shell 提示符为 <code>#</code> 则表示具有 root 权限。</h3>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 多媒体框架简介</title>
    <url>/posts/f4b/</url>
    <content><![CDATA[<h1 id="Android-多媒体框架简介"><a href="#Android-多媒体框架简介" class="headerlink" title="Android 多媒体框架简介"></a>Android 多媒体框架简介</h1><object data="/pdf/Android 多媒体框架简介.pdf" type="application/pdf" width="100%" height="877px">
]]></content>
      <categories>
        <category>Android</category>
        <category>Media</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Binder</tag>
        <tag>Android</tag>
        <tag>Media</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 开机启动流程</title>
    <url>/posts/ce79/</url>
    <content><![CDATA[<h1 id="Android-开机启动流程"><a href="#Android-开机启动流程" class="headerlink" title="Android 开机启动流程"></a>Android 开机启动流程</h1><p>Android 系统完整的启动流程，从系统层次角度可分为 Linux 系统层、Android 系统服务层、Zygote 进程模型三个阶段。</p>
<p>从开机到启动 Home Launcher 完成具体的任务细节可分为七个步骤：</p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702688201.png" alt="image-20230202140213148"></p>
<p><strong>启动流程图如下：</strong></p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702688312.png" alt="image-20230202144415699"></p>
<h2 id="1、启动电源以及系统启动"><a href="#1、启动电源以及系统启动" class="headerlink" title="1、启动电源以及系统启动"></a>1、启动电源以及系统启动</h2><p>当电源按钮按下时引导芯片从预定义的地方（固化在ROM）开始执行。加载引导程序BootLoader到RAM中，然后执行。</p>
<h2 id="2、引导程序-BootLoader"><a href="#2、引导程序-BootLoader" class="headerlink" title="2、引导程序 BootLoader"></a>2、引导程序 BootLoader</h2><p>引导程序 BootLoader 是在 Android 操作系统开始运行前的一个小程序，是运行的第一个程序。主要有检查RAM，初始化硬件参数等功能，当然它的最终目的是把操作系统给拉起来。</p>
<blockquote>
<p>源码文件路径：<code>/bootable/bootloader/legacy/</code></p>
<p>BootLoader的主要功能分析：</p>
<p>其实 Bootloader 主要的必须的作用只有一个：就是把操作系统映像文件拷贝到 RAM 中去，然后跳转到它的入口处去执行，我们称之为启动加载模式，该过程没有用户的介入，是它正常工作的模式。它的步骤如下：</p>
<p>Stage1:</p>
<ol>
<li>硬件设备初始化。为 stage2 的执行及随后内核的执行准备好基本的硬件环境</li>
<li>为加载 stage2 准备 RAM 空间。为了获得更好的执行速度，通常吧 stage2 加载到 RAM 中执行</li>
<li>复制 stage2 的代码到 RAM 中</li>
<li>设置好堆栈</li>
<li>跳转到 stage2 的 c 程序入口</li>
</ol>
<p>Stage2：</p>
<ol>
<li>初始化本阶段要使用的硬件设备</li>
<li>检测系统内存映射</li>
<li>将内核映像和根文件系统映像从 flash 读到 RAM 中</li>
<li>为内核设置启动参数</li>
<li>调用内核</li>
</ol>
</blockquote>
<h2 id="3、Linux-内核启动"><a href="#3、Linux-内核启动" class="headerlink" title="3、Linux 内核启动"></a>3、Linux 内核启动</h2><p>当内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置后，它首先会在系统文件中寻找 init.rc 文件，并启动 <strong>init.rc 进程</strong>。</p>
<p>这个入口的函数是 <code>start_kernel</code> 函数。 <code>start_kernel</code> 函数完成了内核的大部分初始化工作。实际上，可以将 <code>start_kernel</code> 函数看做内核的main函数。 <code>start_kernel</code> 函数执行到最后调用了 <code>reset_init</code> 函数进行后续的初始化。 <code>reset_init</code> 函数最主要的任务就是启动内核线程 <code>kernel_init</code>。<code>kernel_init</code> 函数将完成设备驱动程序的初始化，并调用 <code>init_post</code> 函数启动用户空间的 init 进程。到 <code>init_post</code> 函数为止，内核的初始化已经基本完成。</p>
<blockquote>
<p>源码文件路径：<code>/kernel_imx/init/main.c</code></p>
</blockquote>
<h2 id="4、init-进程启动"><a href="#4、init-进程启动" class="headerlink" title="4、init 进程启动"></a>4、init 进程启动</h2><p>当初始化内核之后，就会启动一个相当重要的祖先进程，也就是 <strong>init 进程</strong>，在Linux中所有的进程都是由 init 进程直接或间接 fork 出来的。init 进程负责创建系统中最关键的几个子进程，尤其是 Zygote。另外，它还提供了 property service（属性服务），类似于 windows 系统的注册表服务。</p>
<p>init进程会完成很多工作，主要完成以下三件事：</p>
<ol>
<li>创建和挂载启动所需文件目录；</li>
<li>初始化和启动系统属性服务；</li>
<li>解析 init.rc 配置文件并启动 Zygote 进程。</li>
</ol>
<p>在Android系统中，会有个 <code>init.rc</code> 脚本。init 进程一启动就会读取并解析这个脚本文件，把其中的元素整理成自己的数据结构（链表）。</p>
<blockquote>
<p>源码文件路径：<br><code>/system/core/init/init.c</code><br><code>/system/core/rootdir/init.rc</code><br><code>/system/core/init/readme.txt</code></p>
</blockquote>
<h2 id="5、Zygote-进程启动"><a href="#5、Zygote-进程启动" class="headerlink" title="5、Zygote 进程启动"></a>5、Zygote 进程启动</h2><p>Zygote 进程为所有 Java 进程的父进程。主要会完成以下任务：</p>
<ol>
<li>创建 Java 虚拟机并为 Java 虚拟机注册 JNI 方法；</li>
<li>创建服务端 Socket；</li>
<li>预加载类和资源；</li>
<li>启动 SystemServer进程；</li>
<li>等待 AMS 请求创建新的应用进程。</li>
</ol>
<p>在zygote开启的时候，会调用 <code>ZygoteInit.main()</code> 进行初始化。源码如下：</p>
<blockquote>
<p>源码文件路径：<code>/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line">	......</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加载zygote的时候，会传入参数，startSystemServer 变为true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">startSystemServer</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">			startSystemServer = <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class="line">			abiList = argv[i].substring(ABI_LIST_ARG.length());</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class="line">			socketName = argv[i].substring(SOCKET_NAME_ARG.length());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unknown command line argument: &quot;</span> + argv[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	......</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动的SystemServer进程</span></span><br><span class="line">	<span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">		startSystemServer(abiList, socketName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="6、SystemServer-进程启动"><a href="#6、SystemServer-进程启动" class="headerlink" title="6、SystemServer 进程启动"></a>6、SystemServer 进程启动</h2><ol>
<li>创建并启动 Binder 线程池，这样可以和其他进程进行通信；</li>
<li>创建 SystemServiceManager，启用于对系统的服务进行创建、启动和生命周期的管理；</li>
<li>启动系统中的各种服务，如我们熟悉的 AMS、PMS、WMS。</li>
</ol>
<blockquote>
<p>源码文件路径：<code>/frameworks/base/services/java/com/android/server/SystemServer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SystemServer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The main entry point from zygote.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">SystemServer</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// Check for factory test mode.</span></span><br><span class="line">		mFactoryTestMode = FactoryTest.getMode();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化原生服务库</span></span><br><span class="line">		System.loadLibrary(<span class="string">&quot;android_servers&quot;</span>);</span><br><span class="line">		nativeInit();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化系统上下文</span></span><br><span class="line">		createSystemContext();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SystemServiceManager对象</span></span><br><span class="line">		mSystemServiceManager = <span class="keyword">new</span> <span class="title class_">SystemServiceManager</span>(mSystemContext);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启服务</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			startBootstrapServices();</span><br><span class="line">			startCoreServices();</span><br><span class="line">			startOtherServices();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;******************************************&quot;</span>);</span><br><span class="line">			Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;************ Failure starting system services&quot;</span>, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Loop forever.</span></span><br><span class="line">		Looper.loop();</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 初始化系统上下文对象mSystemContext，并设置默认的主题。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createSystemContext</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ActivityThread</span> <span class="variable">activityThread</span> <span class="operator">=</span> ActivityThread.systemMain();</span><br><span class="line">		mSystemContext = activityThread.getSystemContext();</span><br><span class="line">		mSystemContext.setTheme(android.R.style.Theme_DeviceDefault_Light_DarkActionBar);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 在这里开启了几个核心的服务，因为这些服务之间相互依赖，所以都放在了这个方法里面。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startBootstrapServices</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化ActivityManagerService</span></span><br><span class="line">		mActivityManagerService = mSystemServiceManager</span><br><span class="line">			.startService(ActivityManagerService.Lifecycle.class).getService();</span><br><span class="line">		mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化PowerManagerService，因为其他服务需要依赖这个Service，因此需要尽快的初始化</span></span><br><span class="line">		mPowerManagerService = mSystemServiceManager</span><br><span class="line">			.startService(PowerManagerService.class);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 现在电源管理已经开启，ActivityManagerService负责电源管理功能</span></span><br><span class="line">		mActivityManagerService.initPowerManagement();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启DisplayManagerService</span></span><br><span class="line">		mDisplayManagerService = mSystemServiceManager</span><br><span class="line">		.startService(DisplayManagerService.class);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启PackageManagerService</span></span><br><span class="line">		mPackageManagerService = PackageManagerService.main(mSystemContext,mInstaller,</span><br><span class="line">		mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br><span class="line"></span><br><span class="line">		......</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startCoreServices</span><span class="params">()</span> &#123;...&#125;<span class="comment">// 启动一些基本服务。</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">()</span> &#123;...&#125;<span class="comment">// 启动其他服务。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>从上面 <code>SystemServer.java</code> 代码中可以看出，在 SystemServer 进程开启的时候，就会初始化 <code>ActivityManagerService</code>。同时，会加载本地系统的服务库，调用 <code>createSystemContext()</code> 创建系统上下文，创建 <code>ActivityThread</code> 及开启各种服务等等。</p>
<h2 id="7、Launcher-启动"><a href="#7、Launcher-启动" class="headerlink" title="7、Launcher 启动"></a>7、Launcher 启动</h2><p><code>SystemServer</code> 启动的 <code>ActivityManagerService</code> 后，会调用 <code>finishBooting()</code>，完成引导过程。同时发送开机广播 <code>ACTION_BOOT_COMPLETED</code>。然后启动 Launcher，Launcher 启动后会将已安装应用的图标显示在桌面上。</p>
<blockquote>
<p>源码文件路径：<code>/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finishBooting</span><span class="params">()</span> &#123;</span><br><span class="line">	......</span><br><span class="line">	<span class="keyword">final</span> <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> mStartedUsers.keyAt(i);</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_BOOT_COMPLETED, <span class="literal">null</span>);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);</span><br><span class="line">    intent.addFlags(Intent.FLAG_RECEIVER_NO_ABORT);</span><br><span class="line">    broadcastIntentLocked(...);</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="系统启动相关问题"><a href="#系统启动相关问题" class="headerlink" title="系统启动相关问题"></a>系统启动相关问题</h2><h3 id="1、简述Android-系统启动流程"><a href="#1、简述Android-系统启动流程" class="headerlink" title="1、简述Android 系统启动流程"></a>1、简述Android 系统启动流程</h3><p>当按电源键触发开机，首先会从 ROM 中预定义的地方加载引导程序 BootLoader 到 RAM 中，并执行 BootLoader 程序启动 Linux Kernel，然后启动用户级别的第一个进程：init 进程。init 进程会解析init.rc 脚本做一些初始化工作，包括挂载文件系统、创建工作目录以及启动系统服务进程等，其中系统服务进程包括 Zygote、service manager、media 等。在 Zygote 中会进一步去启动 system_server 进程，然后在 system_server 进程中会启动 AMS、WMS、PMS 等服务，等这些服务启动之后，AMS 中就会打开 Launcher 应用的 HomeActivity，最终就看到了手机的 “桌面”。</p>
<h3 id="2、system-server-为什么要在-Zygote-中启动，而不是由-init-直接启动呢？"><a href="#2、system-server-为什么要在-Zygote-中启动，而不是由-init-直接启动呢？" class="headerlink" title="2、system_server 为什么要在 Zygote 中启动，而不是由 init 直接启动呢？"></a>2、system_server 为什么要在 Zygote 中启动，而不是由 init 直接启动呢？</h3><p>Zygote 作为一个孵化器，可以提前加载一些资源，这样 fork() 时基于 Copy-On-Write 机制创建的其他进程就能直接使用这些资源，而不用重新加载。比如 system_server 就可以直接使用 Zygote 中的 JNI函数、共享库、常用的类、以及主题资源。</p>
<h3 id="3、为什么要专门使用-Zygote-进程去孵化应用进程，而不是让-system-server-去孵化呢？"><a href="#3、为什么要专门使用-Zygote-进程去孵化应用进程，而不是让-system-server-去孵化呢？" class="headerlink" title="3、为什么要专门使用 Zygote 进程去孵化应用进程，而不是让 system_server 去孵化呢？"></a>3、为什么要专门使用 Zygote 进程去孵化应用进程，而不是让 system_server 去孵化呢？</h3><p>首先 system_server 相比 Zygote 多运行了 AMS、WMS 等服务，这些对一个应用程序来说是不需要的。另外进程的 fork() 对多线程不友好，仅会将发起调用的线程拷贝到子进程，这可能会导致死锁，而system_server 中肯定是有很多线程的。</p>
<h3 id="4、描述下是怎么导致死锁的"><a href="#4、描述下是怎么导致死锁的" class="headerlink" title="4、描述下是怎么导致死锁的"></a>4、描述下是怎么导致死锁的</h3><p>在 POSIX 标准中，fork 的行为是这样的：复制整个用户空间的数据（通常使用 copy-on-write 的策略，所以可以实现的速度很快）以及所有系统对象，然后仅复制当前线程到子进程。这里：所有父进程中别的线程，到了子进程中都是突然蒸发掉的</p>
<p>对于锁来说，从 OS 看，每个锁有一个所有者，即最后一次 lock 它的线程。假设这么一个环境，在 fork之前，有一个子线程 lock 了某个锁，获得了对锁的所有权。fork 以后，在子进程中，所有的额外线程都人间蒸发了。而锁却被正常复制了，在子进程看来，这个锁没有主人，所以没有任何人可以对它解锁。当子进程想 lock 这个锁时，不再有任何手段可以解开了。程序发生死锁。</p>
<h3 id="5、Zygote-为什么不采用-Binder-机制进行-IPC-通信"><a href="#5、Zygote-为什么不采用-Binder-机制进行-IPC-通信" class="headerlink" title="5、Zygote 为什么不采用 Binder 机制进行 IPC 通信"></a>5、Zygote 为什么不采用 Binder 机制进行 IPC 通信</h3><p>Binder 机制中存在 Binder 线程池，是多线程的，如果 Zygote 采用 Binder 的话就存在上面说的fork() 与 多线程的问题了。其实严格来说，Binder 机制不一定要多线程，所谓的 Binder 线程只不过是在循环读取 Binder 驱动的消息而已，只注册一个 Binder 线程也是可以工作的，比如 service manager就是这样的。实际上 Zygote 尽管没有采取 Binder 机制，它也不是单线程的，但它在 fork() 前主动停止了其他线程，fork() 后重新启动了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>BootLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake 的基础使用</title>
    <url>/posts/d33f/</url>
    <content><![CDATA[<h1 id="CMake-的基础使用"><a href="#CMake-的基础使用" class="headerlink" title="CMake 的基础使用"></a>CMake 的基础使用</h1><h2 id="0、引言"><a href="#0、引言" class="headerlink" title="0、引言"></a>0、引言</h2><p><img src="/images/loading.gif" data-original="https://cmake.org/wp-content/uploads/2023/08/CMake-Logo.svg" alt="CMake"></p>
<p>CMake 是开源、跨平台的构建工具，我们可以编写 CMake 配置文件生成本地的 Makefile。</p>
<p>为什么不直接编写 Makefile，而使用 CMake 生成 Makefile？</p>
<p>对于不同环境下的编译，有着多种 Make 工具，如下：</p>
<ul>
<li>GNU Make</li>
<li>QT qmake</li>
<li>microsoft Nmake</li>
<li>BSD Make (pmake)</li>
<li>Makepp</li>
</ul>
<p>不同的 Make 工具遵循着不同的标准与规范，对应的 Makefile 格式也不统一。如果想要实现跨平台编译，则需要针对不同平台编写不同的 Makefile，严重影响效率和质量。如果我们使用 CMake，就只需要编写 CMake 的配置文件 <strong>CMakeLists.txt</strong>。<strong>CMakeLists.txt</strong> 独立于运行平台和编译器，可跨平台使用，并且 <strong>CMakeLists.txt 规则简单</strong>。</p>
<h2 id="1、安装-CMake"><a href="#1、安装-CMake" class="headerlink" title="1、安装 CMake"></a>1、安装 CMake</h2><p>前往 CMake 官网（<a href="https://cmake.org/download/">Download CMake</a>）下载自己对应平台的 CMake 安装包即可。</p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702415128.png" alt="image-20240105175642517"></p>
<p>Ubuntu 下可直接使用命令 <code>sudo apt install cmake</code> 安装。</p>
<p>安装完成后可以使用命令 <code>cmake -version</code> 查看 CMake 版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cmake -version</span><br><span class="line">cmake version 3.22.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>

<h2 id="2、简单示例"><a href="#2、简单示例" class="headerlink" title="2、简单示例"></a>2、简单示例</h2><h3 id="2-1、项目结构"><a href="#2-1、项目结构" class="headerlink" title="2.1、项目结构"></a>2.1、项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── main.c</span><br></pre></td></tr></table></figure>

<h3 id="2-2、示例源码"><a href="#2-2、示例源码" class="headerlink" title="2.2、示例源码"></a>2.2、示例源码</h3><p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main main.c)</span><br></pre></td></tr></table></figure>

<h3 id="2-3、运行-CMake"><a href="#2-3、运行-CMake" class="headerlink" title="2.3、运行 CMake"></a>2.3、运行 CMake</h3><p>在 <strong>CMakeLists.txt</strong> 所在目录下，输入命令 <code>cmake .</code> ，输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cmake .</span><br><span class="line">CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class="line">  Compatibility with CMake &lt; 2.8.12 will be removed from a future version of</span><br><span class="line">  CMake.</span><br><span class="line"></span><br><span class="line">  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell</span><br><span class="line">  CMake that the project does not need compatibility with older versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo</span><br></pre></td></tr></table></figure>

<p>此时可以观察生成了些什么文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeCache.txt</span><br><span class="line">├── CMakeFiles</span><br><span class="line">├── cmake_install.cmake</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── main.c</span><br><span class="line">└── Makefile</span><br></pre></td></tr></table></figure>

<p>输入 <code>make</code> 命令开始编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">[ 50%] Building C object CMakeFiles/main.dir/main.c.o</span><br><span class="line">[100%] Linking C executable main</span><br><span class="line">[100%] Built target main</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">CMakeCache.txt  CMakeFiles  cmake_install.cmake  CMakeLists.txt  main  main.c  Makefile</span><br></pre></td></tr></table></figure>

<p>可以看见可执行文件 <strong>main</strong> 生成成功，运行 <strong>main</strong> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./main </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>生成的 Makefile 文件带 <code>make clean</code> 功能，可执行命令 <code>make clean</code> 删除 <code>make</code> 命令生成的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">$ ls</span><br><span class="line">CMakeCache.txt  CMakeFiles  cmake_install.cmake  CMakeLists.txt  main.c  Makefile</span><br></pre></td></tr></table></figure>

<h2 id="3、编译多个源文件"><a href="#3、编译多个源文件" class="headerlink" title="3、编译多个源文件"></a>3、编译多个源文件</h2><h3 id="3-1、同一个目录下有多个源文件"><a href="#3-1、同一个目录下有多个源文件" class="headerlink" title="3.1、同一个目录下有多个源文件"></a>3.1、同一个目录下有多个源文件</h3><h4 id="3-1-1、简单情况"><a href="#3-1-1、简单情况" class="headerlink" title="3.1.1、简单情况"></a>3.1.1、简单情况</h4><h5 id="3-1-1-1、项目结构"><a href="#3-1-1-1、项目结构" class="headerlink" title="3.1.1.1、项目结构"></a>3.1.1.1、项目结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── hello.c</span><br><span class="line">├── hello.h</span><br><span class="line">└── main.c</span><br></pre></td></tr></table></figure>

<h5 id="3-1-1-2、示例代码"><a href="#3-1-1-2、示例代码" class="headerlink" title="3.1.1.2、示例代码"></a>3.1.1.2、示例代码</h5><p><strong>hello.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hello.h</strong></p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLO_H</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLO_H</span></span></span><br></pre></td></tr></table></figure>

<p>修改 <strong>main.c</strong> 调用 <strong>hello.h</strong> 声明的函数 <code>void hello(const char *name);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    hello(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <strong>CMakeLists.txt</strong>，在 <code>add_executable</code> 参数中增加 <code>hello.c</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main main.c hello.c)</span><br></pre></td></tr></table></figure>

<h5 id="3-1-1-3、尝试运行"><a href="#3-1-1-3、尝试运行" class="headerlink" title="3.1.1.3、尝试运行"></a>3.1.1.3、尝试运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cmake .</span><br><span class="line">CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class="line">  Compatibility with CMake &lt; 2.8.12 will be removed from a future version of</span><br><span class="line">  CMake.</span><br><span class="line"></span><br><span class="line">  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell</span><br><span class="line">  CMake that the project does not need compatibility with older versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 33%] Building C object CMakeFiles/main.dir/main.c.o</span><br><span class="line">[ 66%] Building C object CMakeFiles/main.dir/hello.c.o</span><br><span class="line">[100%] Linking C executable main</span><br><span class="line">[100%] Built target main</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">CMakeCache.txt  CMakeFiles  cmake_install.cmake  CMakeLists.txt  hello.c  hello.h  main  main.c  Makefile</span><br><span class="line"></span><br><span class="line">$ ./main</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<h4 id="3-1-2、使用-aux-source-directory-dir-var"><a href="#3-1-2、使用-aux-source-directory-dir-var" class="headerlink" title="3.1.2、使用 aux_source_directory(dir var)"></a>3.1.2、使用 <code>aux_source_directory(dir var)</code></h4><p>根据 3.1.1 我们可以知道，在同一目录下想要编译多个源文件，只需要在 <code>add_executable()</code> 中添加上所有的源文件即可。</p>
<p>但是如果有很多个源文件还一个个添加就太低效了，此时我们可以使用 <code>aux_source_directory(dir var)</code> 命令，这个命令可以将指定目前下的源文件存储在一个变量中。示例如下：</p>
<h5 id="3-1-2-1、项目结构"><a href="#3-1-2-1、项目结构" class="headerlink" title="3.1.2.1、项目结构"></a>3.1.2.1、项目结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── hello2.c</span><br><span class="line">├── hello2.h</span><br><span class="line">├── hello.c</span><br><span class="line">├── hello.h</span><br><span class="line">└── main.c</span><br></pre></td></tr></table></figure>

<h5 id="3-1-2-2、示例代码"><a href="#3-1-2-2、示例代码" class="headerlink" title="3.1.2.2、示例代码"></a>3.1.2.2、示例代码</h5><p><strong>hello2.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello2</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hello2.h</strong></p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLO2_H</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello2</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLO2_H</span></span></span><br></pre></td></tr></table></figure>

<p>修改 <strong>main.c</strong> 添加调用 <strong>hello2.h</strong> 声明的函数 <code>void hello2(const char *name);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    hello(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">    hello2(<span class="string">&quot;Cmake&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <strong>CMakeLists.txt</strong>，使用 <code>aux_source_directory(dir var)</code> 把当前目录下的源文件存列表存放到变量 <code>SRC_LIST</code> 里;</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>注：cmake 中使用变量采用 <code>$&#123;&#125;</code>，如 <code>$&#123;SRC_LIST&#125;</code></p>
<h5 id="3-1-2-3、尝试运行"><a href="#3-1-2-3、尝试运行" class="headerlink" title="3.1.2.3、尝试运行"></a>3.1.2.3、尝试运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cmake .</span><br><span class="line">CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class="line">  Compatibility with CMake &lt; 2.8.12 will be removed from a future version of</span><br><span class="line">  CMake.</span><br><span class="line"></span><br><span class="line">  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell</span><br><span class="line">  CMake that the project does not need compatibility with older versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 25%] Building C object CMakeFiles/main.dir/hello.c.o</span><br><span class="line">[ 50%] Building C object CMakeFiles/main.dir/hello2.c.o</span><br><span class="line">[ 75%] Building C object CMakeFiles/main.dir/main.c.o</span><br><span class="line">[100%] Linking C executable main</span><br><span class="line">[100%] Built target main</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">CMakeCache.txt  CMakeFiles  cmake_install.cmake  CMakeLists.txt  hello2.c  hello2.h  hello.c  hello.h  main  main.c  Makefile</span><br><span class="line"></span><br><span class="line">$ ./main</span><br><span class="line">Hello World!</span><br><span class="line">Hello Cmake!</span><br></pre></td></tr></table></figure>

<h3 id="3-2-、不同目录下存在多个源文件（项目级组织结构）"><a href="#3-2-、不同目录下存在多个源文件（项目级组织结构）" class="headerlink" title="3.2 、不同目录下存在多个源文件（项目级组织结构）"></a>3.2 、不同目录下存在多个源文件（项目级组织结构）</h3><h4 id="3-2-1、项目结构"><a href="#3-2-1、项目结构" class="headerlink" title="3.2.1、项目结构"></a>3.2.1、项目结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   ├── hello2.h</span><br><span class="line">│   └── hello.h</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── hello2.c</span><br><span class="line">    ├── hello.c</span><br><span class="line">    └── main.c</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2、示例代码"><a href="#3-2-2、示例代码" class="headerlink" title="3.2.2、示例代码"></a>3.2.2、示例代码</h4><p>修改 <strong>CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span> (src)</span><br></pre></td></tr></table></figure>

<p>使用 <code>add_subdirectory()</code> 命令增加编译子目录，语法格式为：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>source_dir</strong>：源代码目录</p>
<p>指定一个包含 <strong>CMakeLists.txt</strong> 和代码文件所在的目录，该目录可以是绝对路径，也可以是相对路径，对于后者相对路径的起点是 <strong>CMAKE_CURRENT_SOURCE_DIR</strong>。此外，如果子目录再次包含的 <strong>CMakeLists.txt</strong>，则将继续处理里层的 <strong>CMakeLists.txt</strong>，而不是继续处理当前源代码。</p>
</li>
<li><p><strong>binary_dir（可选）</strong>：二进制文件目录</p>
<p>如果指定，<code>cmake</code> 命令执行后的输出文件将会存放在此处，若没有指定，默认情况等于 <code>source_dir</code> 没有进行相对路径计算前的路径，也就是 <code>CMAKE_BINARY_DIR</code>。</p>
</li>
<li><p><strong>EXCLUDE_FROM_ALL</strong>：如果指定了 <strong>EXCLUDE_FROM_ALL</strong> 将会将这个目录从编译中排除，如需要等待其他编译完成后再进行单独的编译。</p>
</li>
</ul>
<p>增加 <strong>src&#x2F;CMakeLists.txt</strong> </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span> (. SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span> (../<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure>

<p><code>include_directories</code> 命令用来向工程添加多个指定头文件的搜索路径，路径之间用空格分隔。</p>
<p><code>set</code> 命令用于自定义变量，特殊的是 <code>EXECUTABLE_OUTPUT_PATH</code> 是个系统自带的预定义变量。</p>
<ul>
<li><code>EXECUTABLE_OUTPUT_PATH</code>：目标二进制可执行文件的存放位置</li>
<li><code>PROJECT_SOURCE_DIR</code>：工程的根目录</li>
</ul>
<p>这里 <code>set </code>的意思是把存放二进制文件的位置设置为工程根目录下的bin目录。（cmake有很多预定义变量，可自行上网搜索）</p>
<h4 id="3-2-3、尝试运行"><a href="#3-2-3、尝试运行" class="headerlink" title="3.2.3、尝试运行"></a>3.2.3、尝试运行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd build/</span><br><span class="line"></span><br><span class="line">$ cmake ..</span><br><span class="line">CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class="line">  Compatibility with CMake &lt; 2.8.12 will be removed from a future version of</span><br><span class="line">  CMake.</span><br><span class="line"></span><br><span class="line">  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell</span><br><span class="line">  CMake that the project does not need compatibility with older versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo/build</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 25%] Building C object src/CMakeFiles/main.dir/hello.c.o</span><br><span class="line">[ 50%] Building C object src/CMakeFiles/main.dir/hello2.c.o</span><br><span class="line">[ 75%] Building C object src/CMakeFiles/main.dir/main.c.o</span><br><span class="line">[100%] Linking C executable ../../bin/main</span><br><span class="line">[100%] Built target main</span><br><span class="line"></span><br><span class="line">$ ../bin/main </span><br><span class="line">Hello World!</span><br><span class="line">Hello Cmake!</span><br></pre></td></tr></table></figure>

<h2 id="4、生成库文件"><a href="#4、生成库文件" class="headerlink" title="4、生成库文件"></a>4、生成库文件</h2><h3 id="4-1、项目结构"><a href="#4-1、项目结构" class="headerlink" title="4.1、项目结构"></a>4.1、项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── lib</span><br><span class="line">└── src</span><br><span class="line">    └── hello.c</span><br></pre></td></tr></table></figure>

<h3 id="4-2、示例代码"><a href="#4-2、示例代码" class="headerlink" title="4.2、示例代码"></a>4.2、示例代码</h3><p><strong>CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span> (src SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span> (hello_shared SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">add_library</span> (hello_static STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_target_properties</span> (hello_shared PROPERTIES OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">set_target_properties</span> (hello_static PROPERTIES OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>add_library</code>：生成动态库或静态库(第1个参数指定库的名字；第2个参数决定是动态还是静态，如果没有就默认静态；第3个参数指定生成库的源文件)</li>
<li><code>set_target_properties</code>：设置最终生成的库的名称，还有其它功能，如设置库的版本号等</li>
<li><code>LIBRARY_OUTPUT_PATH</code>：库文件的默认输出路径，这里设置为工程目录下的lib目录</li>
</ul>
<p>前面使用 <code>set_target_properties</code> 重新定义了库的输出名称，如果不使用 <code>set_target_properties</code>，那么库的名称就是 <code>add_library</code> 里定义的名称。</p>
<p>连续2次使用 <code>add_library</code> 指定库名称时（第一个参数），名称不能相同，而 <code>set_target_properties</code> 可以把名称设置为相同，只是最终生成的库文件后缀不同（一个是.so，一个是.a）。</p>
<h3 id="4-3、尝试运行"><a href="#4-3、尝试运行" class="headerlink" title="4.3、尝试运行"></a>4.3、尝试运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd build/</span><br><span class="line"></span><br><span class="line">$ cmake ..</span><br><span class="line">CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class="line">  Compatibility with CMake &lt; 2.8.12 will be removed from a future version of</span><br><span class="line">  CMake.</span><br><span class="line"></span><br><span class="line">  Update the VERSION argument &lt;min&gt; value or use a ...&lt;max&gt; suffix to tell</span><br><span class="line">  CMake that the project does not need compatibility with older versions.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo/build</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 25%] Building C object CMakeFiles/hello_shared.dir/src/hello.c.o</span><br><span class="line">[ 50%] Linking C shared library ../lib/libhello.so</span><br><span class="line">[ 50%] Built target hello_shared</span><br><span class="line">[ 75%] Building C object CMakeFiles/hello_static.dir/src/hello.c.o</span><br><span class="line">[100%] Linking C static library ../lib/libhello.a</span><br><span class="line">[100%] Built target hello_static</span><br><span class="line"></span><br><span class="line">$ ls ../lib/</span><br><span class="line">libhello.a  libhello.so</span><br></pre></td></tr></table></figure>

<h2 id="5、链接库文件"><a href="#5、链接库文件" class="headerlink" title="5、链接库文件"></a>5、链接库文件</h2><h3 id="5-1、项目结构"><a href="#5-1、项目结构" class="headerlink" title="5.1、项目结构"></a>5.1、项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── hello.h</span><br><span class="line">├── lib</span><br><span class="line">│   ├── libhello.a</span><br><span class="line">│   └── libhello.so</span><br><span class="line">└── src</span><br><span class="line">    └── main.c</span><br></pre></td></tr></table></figure>

<h3 id="5-2、示例代码"><a href="#5-2、示例代码" class="headerlink" title="5.2、示例代码"></a>5.2、示例代码</h3><p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    hello(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CMakeLists.txt</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (SRC_LIST <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find hello.h</span></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(HELLO_LIB hello HINTS <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (main <span class="variable">$&#123;HELLO_LIB&#125;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>find_library</code>：在指定目录下查找指定库，并把库的绝对路径存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是 HINTS，第4个参数是路径，其它用法可以参考 cmake 文档</li>
<li><code>target_link_libraries</code>：把目标文件与库文件进行链接</li>
</ul>
<h3 id="5-3、尝试运行"><a href="#5-3、尝试运行" class="headerlink" title="5.3、尝试运行"></a>5.3、尝试运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd build/</span><br><span class="line"></span><br><span class="line">$ cmake ..</span><br><span class="line">-- The C compiler identification is GNU 11.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 11.4.0</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/rachel/sdb/cmake_test/demo/build</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 50%] Building C object CMakeFiles/main.dir/src/main.c.o</span><br><span class="line">[100%] Linking C executable ../bin/main</span><br><span class="line">[100%] Built target main</span><br><span class="line"></span><br><span class="line">$ ../bin/main </span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">$ rm ../lib/libhello.a</span><br><span class="line"></span><br><span class="line">$ ../bin/main </span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">$ rm ../lib/libhello.so</span><br><span class="line"></span><br><span class="line">$ ../bin/main </span><br><span class="line">../bin/main: error while loading shared libraries: libhello.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>adb shell</title>
    <url>/posts/76c2/</url>
    <content><![CDATA[<h1 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h1><h3 id="1、pm-命令"><a href="#1、pm-命令" class="headerlink" title="1、pm 命令"></a>1、pm 命令</h3><blockquote>
<ol>
<li><p>安装应用程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm install &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure>

<p>安装指定路径下的 APK 文件</p>
</li>
<li><p>卸载应用程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm uninstall &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>卸载指定包名的应用程序。</p>
</li>
<li><p>清除应用程序数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm clear &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>清除指定应用程序的数据。</p>
</li>
<li><p>列出所有已安装的应用程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm list packages [-f] [-s] [-3]</span><br></pre></td></tr></table></figure>

<p>列出所有已安装的应用程序。使用 <code>-f</code> 参数显示应用程序的文件路径，<code>-s</code> 显示系统应用，<code>-3</code> 显示仅为当前用户安装的应用。</p>
</li>
<li><p>查看应用程序的详细信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm dump &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>查看指定包名应用程序的详细信息，包括应用程序的权限、组件信息等。</p>
</li>
<li><p>授予应用程序权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm grant &lt;package_name&gt; &lt;permission&gt;</span><br></pre></td></tr></table></figure>

<p>授予指定包名的应用程序指定的权限。</p>
</li>
<li><p>撤销应用程序权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm revoke &lt;package_name&gt; &lt;permission&gt;</span><br></pre></td></tr></table></figure>

<p>撤销指定包名的应用程序的指定权限。</p>
</li>
<li><p>查看应用程序的版本信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm dump &lt;package_name&gt; | grep versionName</span><br></pre></td></tr></table></figure>

<p>查看指定包名应用程序的版本名称信息。</p>
</li>
</ol>
</blockquote>
<h3 id="2、am-命令"><a href="#2、am-命令" class="headerlink" title="2、am 命令"></a>2、am 命令</h3><blockquote>
<ol>
<li><p>启动应用程序或活动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am start [-n &lt;component_name&gt;] [-a &lt;action&gt;] [-c &lt;category&gt;] [-d &lt;data_uri&gt;] [-t &lt;mime_type&gt;] [--ez &lt;extra_key&gt; &lt;boolean_value&gt;] [...]</span><br></pre></td></tr></table></figure>

<p>启动指定应用程序的主活动，或者指定某个活动。可以指定 action、category、data URI、MIME 类型和额外的键值对作为启动参数。</p>
</li>
<li><p>发送广播：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am broadcast [-a &lt;action&gt;] [-c &lt;category&gt;] [-d &lt;data_uri&gt;] [-t &lt;mime_type&gt;] [--ez &lt;extra_key&gt; &lt;boolean_value&gt;] [...]</span><br></pre></td></tr></table></figure>

<p>发送一个广播，可以指定 action、category、data URI、MIME 类型和额外的键值对作为广播内容。</p>
</li>
<li><p>执行测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am instrument [-w] [-r] [-e &lt;name&gt; &lt;value&gt;] &lt;test_package&gt;</span><br></pre></td></tr></table></figure>

<p>执行测试，可以指定测试包的包名，同时可以设置测试参数。</p>
</li>
<li><p>强制停止应用程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am force-stop &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>强制停止指定包名的应用程序。</p>
</li>
<li><p>查看最近的任务栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am stack list</span><br></pre></td></tr></table></figure>

<p>列出最近的任务栈信息。</p>
</li>
<li><p>移动任务到前台：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am stack move-task &lt;task_id&gt; &lt;position&gt;</span><br></pre></td></tr></table></figure>

<p>将指定的任务移动到指定的位置（front、back 或 index）。</p>
</li>
<li><p>查看任务栈信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">am stack info &lt;stack_id&gt;</span><br></pre></td></tr></table></figure>

<p>查看指定任务栈的信息。</p>
</li>
</ol>
</blockquote>
<h3 id="3、dumpsys-命令"><a href="#3、dumpsys-命令" class="headerlink" title="3、dumpsys 命令"></a>3、dumpsys 命令</h3><blockquote>
<ol>
<li><p>查看当前运行的活动信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys activity</span><br></pre></td></tr></table></figure>
<p>这将显示当前运行的所有活动、任务栈和历史活动信息。</p>
</li>
<li><p>查看应用程序状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys package &lt;package_name&gt;</span><br></pre></td></tr></table></figure>
<p>这将显示指定包名的应用程序的状态信息，包括权限信息、应用签名、版本信息等。</p>
</li>
<li><p>查看电池状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys battery</span><br></pre></td></tr></table></figure>
<p>这将显示设备的电池状态信息，如电池电量、充电状态等。</p>
</li>
<li><p>查看内存使用情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys meminfo &lt;package_name&gt;</span><br></pre></td></tr></table></figure>
<p>这将显示指定包名应用程序的内存使用情况，包括内存占用、缓存、进程信息等。</p>
</li>
<li><p>查看网络状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys netstats</span><br></pre></td></tr></table></figure>
<p>这将显示设备的网络使用情况，包括数据使用量、连接信息等。</p>
</li>
<li><p>查看传感器信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys sensorservice</span><br></pre></td></tr></table></figure>
<p>这将显示设备的传感器信息，如加速度计、陀螺仪、磁力计等传感器数据。</p>
</li>
<li><p>查看通知状态信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys notification</span><br></pre></td></tr></table></figure>
<p>这将显示设备上的通知状态信息，包括通知队列、通知设置等。</p>
</li>
<li><p>查看其他服务信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpsys &lt;service_name&gt;</span><br></pre></td></tr></table></figure>
<p>这将显示指定服务的状态信息，其中 <code>&lt;service_name&gt;</code> 是要查看的服务名称。</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 各种文件夹路径</title>
    <url>/posts/8656/</url>
    <content><![CDATA[<h1 id="android-各种文件夹路径"><a href="#android-各种文件夹路径" class="headerlink" title="android 各种文件夹路径"></a>android 各种文件夹路径</h1><h2 id="1、Context-类方法"><a href="#1、Context-类方法" class="headerlink" title="1、Context 类方法"></a>1、Context 类方法</h2><table>
<thead>
<tr>
<th>method</th>
<th>dir</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td><code>context.getCacheDir()</code></td>
<td>&#x2F;data&#x2F;data&#x2F;com.example.test&#x2F;cache</td>
<td>返回通过 <code>Context.openFileOutput()</code> 创建和存储的文件系统的绝对路径，应用程序文件，这些文件会在程序被卸载的时候全部删掉。</td>
</tr>
<tr>
<td><code>context.getFilesDir()</code></td>
<td>&#x2F;data&#x2F;data&#x2F;com.example.test&#x2F;files</td>
<td>返回应用程序指定的缓存目录，这些文件在设备内存不足时会优先被删除掉。存放在这里的文件是没有任何保障的，可能会随时丢掉。</td>
</tr>
<tr>
<td><code>context.getDir(&quot;test.txt&quot;, Context.MODE_WORLD_WRITEABLE)</code></td>
<td>&#x2F;data&#x2F;data&#x2F;com.example.test&#x2F;test.txt</td>
<td>这是一个可以存放你自己应用程序自定义的文件，你可以通过该方法返回的 File 实例来创建或者访问这个目录。<br />注意！该目录下的文件只有你自己的程序可以访问。</td>
</tr>
<tr>
<td><code>context.getPackageResourcePath()</code></td>
<td>&#x2F;data&#x2F;app&#x2F;xxx.apk</td>
<td>返回当前应用程序的资源文件路径</td>
</tr>
<tr>
<td><code>context.getPackageCodePath()</code></td>
<td>&#x2F;data&#x2F;app&#x2F;xxx.apk</td>
<td>返回当前应用程序的可执行代码文件( APK 文件)的路径</td>
</tr>
<tr>
<td><code>context.getExternalCacheDir()</code></td>
<td>&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;cache</td>
<td>使用这个方法需要写外部存储的权限 <code>WRITE_EXTERNAL_STORAGE</code>，调用该方法会返回应用程序的外部文件系统 <code>Environment.getExternalStorageDirectory()</code> 目录的绝对路径，它是用来存放应用的缓存文件，它和 <code>getCacheDir()</code> 目录一样，目录下的文件都会在程序被卸载的时候被清除掉。</td>
</tr>
<tr>
<td><code>context.getExternalFilesDir(Environment.DIRECTORY_MUSIC)</code><br />……</td>
<td>&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Music<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Podcasts<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Ringtones<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Alarms<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Notifications<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Pictures<br />&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test&#x2F;files&#x2F;Movies</td>
<td>使用这个方法需要写外部存储的权限 <code>WRITE_EXTERNAL_STORAGE</code> 这个目录是与应用程序相关的外部文件系统，它和 <code>getExternalCacheDir()</code> 不一样的是只要应用程序存在它就会一直存在，这些文件只属于你的应用，不能被其它人访问。同样，这个目录下的文件在程序被卸载时也会被一同删除。</td>
</tr>
<tr>
<td><code>context.getDatabasePath(xxx)</code></td>
<td>&#x2F;data&#x2F;data&#x2F;com.example.test&#x2F;databases&#x2F;xxx.db</td>
<td>对应数据库的全路径名</td>
</tr>
<tr>
<td><code>context.getObbDir()</code></td>
<td>&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.example.test</td>
<td>返回应用程序的 OBB 文件目录（如果有的话），注意如果该应用程序没有任何 OBB 文件，这个目录是不存在的。</td>
</tr>
<tr>
<td><code>context.getSharedPrefsFile()</code></td>
<td></td>
<td>获取 SharedPreferences 文件</td>
</tr>
</tbody></table>
<blockquote>
<p><code>getPackageResourcePath()</code> 用于访问应用程序的资源文件,而 <code>getPackageCodePath()</code> 用于访问应用程序的可执行代码文件。</p>
<p>在大多数情况下,这两个方法返回的路径是相同的，因为 APK 文件中包含了资源文件和可执行代码文件。但如果应用程序使用了资源文件的分离技术(如通过 Android App Bundle 发布),则这两个路径可能不同。</p>
</blockquote>
<h2 id="2、Environment-类方法"><a href="#2、Environment-类方法" class="headerlink" title="2、Environment 类方法"></a>2、Environment 类方法</h2><table>
<thead>
<tr>
<th>method</th>
<th>dir</th>
</tr>
</thead>
<tbody><tr>
<td><code>Environment.getDataDirectory()</code></td>
<td>&#x2F;data</td>
</tr>
<tr>
<td><code>Environment.getDownloadCacheDirectory()</code></td>
<td>&#x2F;data&#x2F;cache</td>
</tr>
<tr>
<td><code>Environment.getExternalStorageDirectory()</code></td>
<td>&#x2F;storage&#x2F;emulated&#x2F;0</td>
</tr>
<tr>
<td><code>Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC)</code></td>
<td>&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Music</td>
</tr>
<tr>
<td><code>Environment.getRootDirectory()</code></td>
<td>&#x2F;system</td>
</tr>
</tbody></table>
<h2 id="3、外部存储相关权限设置"><a href="#3、外部存储相关权限设置" class="headerlink" title="3、外部存储相关权限设置"></a>3、外部存储相关权限设置</h2><h4 id="3-1、SDK＜23-Android-6-0-直接在-AndroidManifest-xml-中申请即可"><a href="#3-1、SDK＜23-Android-6-0-直接在-AndroidManifest-xml-中申请即可" class="headerlink" title="3.1、SDK＜23(Android 6.0) 直接在 AndroidManifest.xml 中申请即可"></a>3.1、SDK＜23(Android 6.0) 直接在 AndroidManifest.xml 中申请即可</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2、23-Android-6-0-≤SDK＜30-Android-11-在-AndroidManifest-xml-中申请，并且代码中也需要动态申请"><a href="#3-2、23-Android-6-0-≤SDK＜30-Android-11-在-AndroidManifest-xml-中申请，并且代码中也需要动态申请" class="headerlink" title="3.2、23(Android 6.0)≤SDK＜30(Android 11) 在 AndroidManifest.xml 中申请，并且代码中也需要动态申请"></a>3.2、23(Android 6.0)≤SDK＜30(Android 11) 在 AndroidManifest.xml 中申请，并且代码中也需要动态申请</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestPermission</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//判断是否已经赋予权限</span></span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="built_in">this</span>,Manifest.permission.WRITE_EXTERNAL_STORAGE) != PERMISSION_GRANTED</span><br><span class="line">        || ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE) != PERMISSION_GRANTED) &#123;</span><br><span class="line">        ActivityCompat.requestPermissions(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.READ_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, String[] permissions, <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PERMISSION_GRANTED</span><br><span class="line">            || ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE != PERMISSION_GRANTED) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;请开启存储权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;存储权限开启成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3、SDK≥30-Android-11-在-AndroidManifest-xml-中申请，并且代码中也需要动态申请"><a href="#3-3、SDK≥30-Android-11-在-AndroidManifest-xml-中申请，并且代码中也需要动态申请" class="headerlink" title="3.3、SDK≥30(Android 11) 在 AndroidManifest.xml 中申请，并且代码中也需要动态申请"></a>3.3、SDK≥30(Android 11) 在 AndroidManifest.xml 中申请，并且代码中也需要动态申请</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果Android11及以上申请以上的读写存储权限，用户允许后，允许的只是媒体文件，并不能操作手机的文件管理（例如：创建文件到指定目录下） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有申请通过 ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION 此权限才允许操作手机中的文件管理 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Android 11 新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;.application.MainApplication&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/biao&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:persistent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:sharedUserId</span>=<span class="string">&quot;android.uid.system&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:preserveLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- android 10 根目录创建文件夹 android:requestLegacyExternalStorage=&quot;true&quot; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- android 11 根目录创建文件夹 android:preserveLegacyExternalStorage=&quot;true&quot; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 Android11 的设备上覆盖安装时，才能访问旧版存储位置，卸载重装会失效 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestPermission</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">        <span class="comment">// 先判断有没有权限</span></span><br><span class="line">        <span class="keyword">if</span> (!Environment.isExternalStorageManager()) &#123;</span><br><span class="line">            <span class="comment">//跳转到设置界面引导用户打开</span></span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);</span><br><span class="line">            intent.setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + getPackageName()));</span><br><span class="line">            startActivityForResult(intent, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(&quot;NewApi&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (Environment.isExternalStorageManager())&#123;</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showToast(<span class="string">&quot;存储权限获取失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、Android-13-媒体权限"><a href="#4、Android-13-媒体权限" class="headerlink" title="4、Android 13 媒体权限"></a>4、Android 13 媒体权限</h2><p>在 Android 13 之前，应用如果想要访问设备中的媒体资源的话，都必须通过 <code>READ_EXTERNAL_STORAGE</code> 权限才能实现。从 Android 13 开始，系统将 <code>READ_EXTERNAL_STORAGE</code> 细分为了三个更加明确的权限，分别用于访问用户的三类媒体资源：Image、Video、Audio，从而让用户能够按需授权，避免隐私风险无序扩大。</p>
<table>
<thead>
<tr>
<th>媒体类型</th>
<th>请求权限</th>
</tr>
</thead>
<tbody><tr>
<td>Image</td>
<td>READ_MEDIA_IMAGES</td>
</tr>
<tr>
<td>Video</td>
<td>READ_MEDIA_VIDEO</td>
</tr>
<tr>
<td>Audio</td>
<td>READ_MEDIA_AUDIO</td>
</tr>
</tbody></table>
<p>使用时按需进行申请即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_IMAGES&quot;</span> <span class="attr">android:minSdkVersion</span> = <span class="string">&quot;33&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_AUDIO&quot;</span> <span class="attr">android:minSdkVersion</span> = <span class="string">&quot;33&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_VIDEO&quot;</span> <span class="attr">android:minSdkVersion</span> = <span class="string">&quot;33&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  向前兼容  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> <span class="attr">android:maxSdkVersion</span>=<span class="string">&quot;32&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
        <category>App</category>
      </categories>
      <tags>
        <tag>permission</tag>
      </tags>
  </entry>
  <entry>
    <title>android.view.KeyEvent</title>
    <url>/posts/39c7/</url>
    <content><![CDATA[<h1 id="android-view-KeyEvent"><a href="#android-view-KeyEvent" class="headerlink" title="android.view.KeyEvent"></a>android.view.KeyEvent</h1><table>
<thead>
<tr>
<th>number</th>
<th>code</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>KEYCODE_UNKNOWN</td>
<td>未知按键</td>
</tr>
<tr>
<td>1</td>
<td>KEYCODE_SOFT_LEFT</td>
<td>按键 Soft Left</td>
</tr>
<tr>
<td>2</td>
<td>KEYCODE_SOFT_RIGHT</td>
<td>按键 Soft Right</td>
</tr>
<tr>
<td>3</td>
<td>KEYCODE_HOME</td>
<td>按键 Home</td>
</tr>
<tr>
<td>4</td>
<td>KEYCODE_BACK</td>
<td>返回键</td>
</tr>
<tr>
<td>5</td>
<td>KEYCODE_CALL</td>
<td>拨号键</td>
</tr>
<tr>
<td>6</td>
<td>KEYCODE_ENDCALL</td>
<td>挂机键</td>
</tr>
<tr>
<td>7</td>
<td>KEYCODE_0</td>
<td>按键 ‘0’</td>
</tr>
<tr>
<td>8</td>
<td>KEYCODE_1</td>
<td>按键 ‘1’</td>
</tr>
<tr>
<td>9</td>
<td>KEYCODE_2</td>
<td>按键 ‘2’</td>
</tr>
<tr>
<td>10</td>
<td>KEYCODE_3</td>
<td>按键 ‘3’</td>
</tr>
<tr>
<td>11</td>
<td>KEYCODE_4</td>
<td>按键 ‘4’</td>
</tr>
<tr>
<td>12</td>
<td>KEYCODE_5</td>
<td>按键 ‘5’</td>
</tr>
<tr>
<td>13</td>
<td>KEYCODE_6</td>
<td>按键 ‘6’</td>
</tr>
<tr>
<td>14</td>
<td>KEYCODE_7</td>
<td>按键 ‘7’</td>
</tr>
<tr>
<td>15</td>
<td>KEYCODE_8</td>
<td>按键 ‘8’</td>
</tr>
<tr>
<td>16</td>
<td>KEYCODE_9</td>
<td>按键 ‘9’</td>
</tr>
<tr>
<td>17</td>
<td>KEYCODE_STAR</td>
<td>按键 ‘*’</td>
</tr>
<tr>
<td>18</td>
<td>KEYCODE_POUND</td>
<td>按键 ‘#’</td>
</tr>
<tr>
<td>19</td>
<td>KEYCODE_DPAD_UP</td>
<td>导航键 向上</td>
</tr>
<tr>
<td>20</td>
<td>KEYCODE_DPAD_DOWN</td>
<td>导航键 向下</td>
</tr>
<tr>
<td>21</td>
<td>KEYCODE_DPAD_LEFT</td>
<td>导航键 向左</td>
</tr>
<tr>
<td>22</td>
<td>KEYCODE_DPAD_RIGHT</td>
<td>导航键 向右</td>
</tr>
<tr>
<td>23</td>
<td>KEYCODE_DPAD_CENTER</td>
<td>导航键 确定键</td>
</tr>
<tr>
<td>24</td>
<td>KEYCODE_VOLUME_UP</td>
<td>音量增加键</td>
</tr>
<tr>
<td>25</td>
<td>KEYCODE_VOLUME_DOWN</td>
<td>音量减小键</td>
</tr>
<tr>
<td>26</td>
<td>KEYCODE_POWER</td>
<td>电源键</td>
</tr>
<tr>
<td>27</td>
<td>KEYCODE_CAMERA</td>
<td>拍照键</td>
</tr>
<tr>
<td>28</td>
<td>KEYCODE_CLEAR</td>
<td>按键 Clear</td>
</tr>
<tr>
<td>29</td>
<td>KEYCODE_A</td>
<td>按键 A</td>
</tr>
<tr>
<td>30</td>
<td>KEYCODE_B</td>
<td>按键 B</td>
</tr>
<tr>
<td>31</td>
<td>KEYCODE_C</td>
<td>按键 C</td>
</tr>
<tr>
<td>32</td>
<td>KEYCODE_D</td>
<td>按键 D</td>
</tr>
<tr>
<td>33</td>
<td>KEYCODE_E</td>
<td>按键 E</td>
</tr>
<tr>
<td>34</td>
<td>KEYCODE_F</td>
<td>按键 F</td>
</tr>
<tr>
<td>35</td>
<td>KEYCODE_G</td>
<td>按键 G</td>
</tr>
<tr>
<td>36</td>
<td>KEYCODE_H</td>
<td>按键 H</td>
</tr>
<tr>
<td>37</td>
<td>KEYCODE_I</td>
<td>按键 I</td>
</tr>
<tr>
<td>38</td>
<td>KEYCODE_J</td>
<td>按键 J</td>
</tr>
<tr>
<td>39</td>
<td>KEYCODE_K</td>
<td>按键 K</td>
</tr>
<tr>
<td>40</td>
<td>KEYCODE_L</td>
<td>按键 L</td>
</tr>
<tr>
<td>41</td>
<td>KEYCODE_M</td>
<td>按键 M</td>
</tr>
<tr>
<td>42</td>
<td>KEYCODE_N</td>
<td>按键 N</td>
</tr>
<tr>
<td>43</td>
<td>KEYCODE_O</td>
<td>按键 O</td>
</tr>
<tr>
<td>44</td>
<td>KEYCODE_P</td>
<td>按键 P</td>
</tr>
<tr>
<td>45</td>
<td>KEYCODE_Q</td>
<td>按键 Q</td>
</tr>
<tr>
<td>46</td>
<td>KEYCODE_R</td>
<td>按键 R</td>
</tr>
<tr>
<td>47</td>
<td>KEYCODE_S</td>
<td>按键 S</td>
</tr>
<tr>
<td>48</td>
<td>KEYCODE_T</td>
<td>按键 T</td>
</tr>
<tr>
<td>49</td>
<td>KEYCODE_U</td>
<td>按键 U</td>
</tr>
<tr>
<td>50</td>
<td>KEYCODE_V</td>
<td>按键 V</td>
</tr>
<tr>
<td>51</td>
<td>KEYCODE_W</td>
<td>按键 W</td>
</tr>
<tr>
<td>52</td>
<td>KEYCODE_X</td>
<td>按键 X</td>
</tr>
<tr>
<td>53</td>
<td>KEYCODE_Y</td>
<td>按键 Y</td>
</tr>
<tr>
<td>54</td>
<td>KEYCODE_Z</td>
<td>按键 Z</td>
</tr>
<tr>
<td>55</td>
<td>KEYCODE_COMMA</td>
<td>按键 ‘,’</td>
</tr>
<tr>
<td>56</td>
<td>KEYCODE_PERIOD</td>
<td>按键 ‘.’</td>
</tr>
<tr>
<td>57</td>
<td>KEYCODE_ALT_LEFT</td>
<td>Alt + Left</td>
</tr>
<tr>
<td>58</td>
<td>KEYCODE_ALT_RIGHT</td>
<td>Alt + Right</td>
</tr>
<tr>
<td>59</td>
<td>KEYCODE_SHIFT_LEFT</td>
<td>Shift + Left</td>
</tr>
<tr>
<td>60</td>
<td>KEYCODE_SHIFT_RIGHT</td>
<td>Shift + Right</td>
</tr>
<tr>
<td>61</td>
<td>KEYCODE_TAB</td>
<td>Tab 键</td>
</tr>
<tr>
<td>62</td>
<td>KEYCODE_SPACE</td>
<td>空格键</td>
</tr>
<tr>
<td>63</td>
<td>KEYCODE_SYM</td>
<td>按键 Symbol modifier</td>
</tr>
<tr>
<td>64</td>
<td>KEYCODE_EXPLORER</td>
<td>按键 Explorer special function</td>
</tr>
<tr>
<td>65</td>
<td>KEYCODE_ENVELOPE</td>
<td>按键 Envelope special function</td>
</tr>
<tr>
<td>66</td>
<td>KEYCODE_ENTER</td>
<td>回车键</td>
</tr>
<tr>
<td>67</td>
<td>KEYCODE_DEL</td>
<td>退格键</td>
</tr>
<tr>
<td>68</td>
<td>KEYCODE_GRAVE</td>
<td>按键 ‘&#96;’</td>
</tr>
<tr>
<td>69</td>
<td>KEYCODE_MINUS</td>
<td>按键 ‘-‘</td>
</tr>
<tr>
<td>70</td>
<td>KEYCODE_EQUALS</td>
<td>按键 ‘&#x3D;’</td>
</tr>
<tr>
<td>71</td>
<td>KEYCODE_LEFT_BRACKET</td>
<td>按键 ‘[‘</td>
</tr>
<tr>
<td>72</td>
<td>KEYCODE_RIGHT_BRACKET</td>
<td>按键 ‘]’</td>
</tr>
<tr>
<td>73</td>
<td>KEYCODE_BACKSLASH</td>
<td>按键 ‘&#39;</td>
</tr>
<tr>
<td>74</td>
<td>KEYCODE_SEMICOLON</td>
<td>按键 ‘;’</td>
</tr>
<tr>
<td>75</td>
<td>KEYCODE_APOSTROPHE</td>
<td>按键 ‘’’ (单引号)</td>
</tr>
<tr>
<td>76</td>
<td>KEYCODE_SLASH</td>
<td>按键 ‘&#x2F;‘</td>
</tr>
<tr>
<td>77</td>
<td>KEYCODE_AT</td>
<td>按键 ‘@’</td>
</tr>
<tr>
<td>78</td>
<td>KEYCODE_NUM</td>
<td>按键 Number modifier</td>
</tr>
<tr>
<td>79</td>
<td>KEYCODE_HEADSETHOOK</td>
<td>按键 Headset Hook</td>
</tr>
<tr>
<td>80</td>
<td>KEYCODE_FOCUS</td>
<td>拍照 对焦键</td>
</tr>
<tr>
<td>81</td>
<td>KEYCODE_PLUS</td>
<td>按键 ‘+’</td>
</tr>
<tr>
<td>82</td>
<td>KEYCODE_MENU</td>
<td>菜单键</td>
</tr>
<tr>
<td>83</td>
<td>KEYCODE_NOTIFICATION</td>
<td>通知键</td>
</tr>
<tr>
<td>84</td>
<td>KEYCODE_SEARCH</td>
<td>搜索键</td>
</tr>
<tr>
<td>85</td>
<td>TAG_LAST_KEYCODE</td>
<td></td>
</tr>
<tr>
<td>86</td>
<td>KEYCODE_MEDIA_STOP</td>
<td>多媒体键 停止</td>
</tr>
<tr>
<td>87</td>
<td>KEYCODE_MEDIA_NEXT</td>
<td>多媒体键 下一首</td>
</tr>
<tr>
<td>88</td>
<td>KEYCODE_MEDIA_PREVIOUS</td>
<td>多媒体键 上一首</td>
</tr>
<tr>
<td>89</td>
<td>KEYCODE_MEDIA_REWIND</td>
<td>多媒体键 快退</td>
</tr>
<tr>
<td>90</td>
<td>KEYCODE_MEDIA_FAST_FORWARD</td>
<td>多媒体键 快进</td>
</tr>
<tr>
<td>91</td>
<td>KEYCODE_MUTE</td>
<td>话筒静音键</td>
</tr>
<tr>
<td>92</td>
<td>KEYCODE_PAGE_UP</td>
<td>向上翻页键</td>
</tr>
<tr>
<td>93</td>
<td>KEYCODE_PAGE_DOWN</td>
<td>向下翻页键</td>
</tr>
<tr>
<td>94</td>
<td>KEYCODE_PICTSYMBOLS</td>
<td>按键 Picture Symbols modifier</td>
</tr>
<tr>
<td>95</td>
<td>KEYCODE_SWITCH_CHARSET</td>
<td>按键 Switch Charset modifier</td>
</tr>
<tr>
<td>96</td>
<td>KEYCODE_BUTTON_A</td>
<td>游戏手柄按钮 A</td>
</tr>
<tr>
<td>97</td>
<td>KEYCODE_BUTTON_B</td>
<td>游戏手柄按钮 B</td>
</tr>
<tr>
<td>98</td>
<td>KEYCODE_BUTTON_C</td>
<td>游戏手柄按钮 C</td>
</tr>
<tr>
<td>99</td>
<td>KEYCODE_BUTTON_X</td>
<td>游戏手柄按钮 X</td>
</tr>
<tr>
<td>100</td>
<td>KEYCODE_BUTTON_Y</td>
<td>游戏手柄按钮 Y</td>
</tr>
<tr>
<td>101</td>
<td>KEYCODE_BUTTON_Z</td>
<td>游戏手柄按钮 Z</td>
</tr>
<tr>
<td>102</td>
<td>KEYCODE_BUTTON_L1</td>
<td>游戏手柄按钮 L1</td>
</tr>
<tr>
<td>103</td>
<td>KEYCODE_BUTTON_R1</td>
<td>游戏手柄按钮 R1</td>
</tr>
<tr>
<td>104</td>
<td>KEYCODE_BUTTON_L2</td>
<td>游戏手柄按钮 L2</td>
</tr>
<tr>
<td>105</td>
<td>KEYCODE_BUTTON_R2</td>
<td>游戏手柄按钮 R2</td>
</tr>
<tr>
<td>106</td>
<td>KEYCODE_BUTTON_THUMBL</td>
<td>Left Thumb Button</td>
</tr>
<tr>
<td>107</td>
<td>KEYCODE_BUTTON_THUMBR</td>
<td>Right Thumb Button</td>
</tr>
<tr>
<td>108</td>
<td>KEYCODE_BUTTON_START</td>
<td>游戏手柄按钮 Start</td>
</tr>
<tr>
<td>109</td>
<td>KEYCODE_BUTTON_SELECT</td>
<td>游戏手柄按钮 Select</td>
</tr>
<tr>
<td>110</td>
<td>KEYCODE_BUTTON_MODE</td>
<td>游戏手柄按钮 Mode</td>
</tr>
<tr>
<td>111</td>
<td>KEYCODE_ESCAPE</td>
<td>ESC 键</td>
</tr>
<tr>
<td>112</td>
<td>KEYCODE_FORWARD_DEL</td>
<td>删除键</td>
</tr>
<tr>
<td>113</td>
<td>KEYCODE_CTRL_LEFT</td>
<td>Control + Left</td>
</tr>
<tr>
<td>114</td>
<td>KEYCODE_CTRL_RIGHT</td>
<td>Control + Right</td>
</tr>
<tr>
<td>115</td>
<td>KEYCODE_CAPS_LOCK</td>
<td>大写锁定键</td>
</tr>
<tr>
<td>116</td>
<td>KEYCODE_SCROLL_LOCK</td>
<td>滚动锁定键</td>
</tr>
<tr>
<td>117</td>
<td>KEYCODE_META_LEFT</td>
<td>按键 Left Meta modifier</td>
</tr>
<tr>
<td>118</td>
<td>KEYCODE_META_RIGHT</td>
<td>按键 Right Meta modifier</td>
</tr>
<tr>
<td>119</td>
<td>KEYCODE_FUNCTION</td>
<td>按键 Function modifier</td>
</tr>
<tr>
<td>120</td>
<td>KEYCODE_SYSRQ</td>
<td>按键 System Request &#x2F; Print Screen</td>
</tr>
<tr>
<td>121</td>
<td>KEYCODE_BREAK</td>
<td>Break&#x2F;Pause键</td>
</tr>
<tr>
<td>122</td>
<td>KEYCODE_MOVE_HOME</td>
<td>光标移动到开始键</td>
</tr>
<tr>
<td>123</td>
<td>KEYCODE_MOVE_END</td>
<td>光标移动到末尾键</td>
</tr>
<tr>
<td>124</td>
<td>KEYCODE_INSERT</td>
<td>插入键</td>
</tr>
<tr>
<td>125</td>
<td>KEYCODE_FORWARD</td>
<td>按键 Forward</td>
</tr>
<tr>
<td>126</td>
<td>KEYCODE_MEDIA_PLAY</td>
<td>多媒体键 播放</td>
</tr>
<tr>
<td>127</td>
<td>KEYCODE_MEDIA_PAUSE</td>
<td>多媒体键 暂停</td>
</tr>
<tr>
<td>128</td>
<td>KEYCODE_MEDIA_CLOSE</td>
<td>多媒体键 关闭</td>
</tr>
<tr>
<td>129</td>
<td>KEYCODE_MEDIA_EJECT</td>
<td>多媒体键 弹出</td>
</tr>
<tr>
<td>130</td>
<td>KEYCODE_MEDIA_RECORD</td>
<td>多媒体键 录音</td>
</tr>
<tr>
<td>131</td>
<td>KEYCODE_F1</td>
<td>按键 F1</td>
</tr>
<tr>
<td>132</td>
<td>KEYCODE_F2</td>
<td>按键 F2</td>
</tr>
<tr>
<td>133</td>
<td>KEYCODE_F3</td>
<td>按键 F3</td>
</tr>
<tr>
<td>134</td>
<td>KEYCODE_F4</td>
<td>按键 F4</td>
</tr>
<tr>
<td>135</td>
<td>KEYCODE_F5</td>
<td>按键 F5</td>
</tr>
<tr>
<td>136</td>
<td>KEYCODE_F6</td>
<td>按键 F6</td>
</tr>
<tr>
<td>137</td>
<td>KEYCODE_F7</td>
<td>按键 F7</td>
</tr>
<tr>
<td>138</td>
<td>KEYCODE_F8</td>
<td>按键 F8</td>
</tr>
<tr>
<td>139</td>
<td>KEYCODE_F9</td>
<td>按键 F9</td>
</tr>
<tr>
<td>140</td>
<td>KEYCODE_F10</td>
<td>按键 F10</td>
</tr>
<tr>
<td>141</td>
<td>KEYCODE_F11</td>
<td>按键 F11</td>
</tr>
<tr>
<td>142</td>
<td>KEYCODE_F12</td>
<td>按键 F12</td>
</tr>
<tr>
<td>143</td>
<td>KEYCODE_NUM_LOCK</td>
<td>小键盘锁</td>
</tr>
<tr>
<td>144</td>
<td>KEYCODE_NUMPAD_0</td>
<td>小键盘按键 ‘0’</td>
</tr>
<tr>
<td>145</td>
<td>KEYCODE_NUMPAD_1</td>
<td>小键盘按键 ‘1’</td>
</tr>
<tr>
<td>146</td>
<td>KEYCODE_NUMPAD_2</td>
<td>小键盘按键 ‘2’</td>
</tr>
<tr>
<td>147</td>
<td>KEYCODE_NUMPAD_3</td>
<td>小键盘按键 ‘3’</td>
</tr>
<tr>
<td>148</td>
<td>KEYCODE_NUMPAD_4</td>
<td>小键盘按键 ‘4’</td>
</tr>
<tr>
<td>149</td>
<td>KEYCODE_NUMPAD_5</td>
<td>小键盘按键 ‘5’</td>
</tr>
<tr>
<td>150</td>
<td>KEYCODE_NUMPAD_6</td>
<td>小键盘按键 ‘6’</td>
</tr>
<tr>
<td>151</td>
<td>KEYCODE_NUMPAD_7</td>
<td>小键盘按键 ‘7’</td>
</tr>
<tr>
<td>152</td>
<td>KEYCODE_NUMPAD_8</td>
<td>小键盘按键 ‘8’</td>
</tr>
<tr>
<td>153</td>
<td>KEYCODE_NUMPAD_9</td>
<td>小键盘按键 ‘9’</td>
</tr>
<tr>
<td>154</td>
<td>KEYCODE_NUMPAD_DIVIDE</td>
<td>小键盘按键 ‘&#x2F;‘</td>
</tr>
<tr>
<td>155</td>
<td>KEYCODE_NUMPAD_MULTIPLY</td>
<td>小键盘按键 ‘*’</td>
</tr>
<tr>
<td>156</td>
<td>KEYCODE_NUMPAD_SUBTRACT</td>
<td>小键盘按键 ‘-‘</td>
</tr>
<tr>
<td>157</td>
<td>KEYCODE_NUMPAD_ADD</td>
<td>小键盘按键 ‘+’</td>
</tr>
<tr>
<td>158</td>
<td>KEYCODE_NUMPAD_DOT</td>
<td>小键盘按键 ‘.’</td>
</tr>
<tr>
<td>159</td>
<td>KEYCODE_NUMPAD_COMMA</td>
<td>小键盘按键 ‘,’</td>
</tr>
<tr>
<td>160</td>
<td>KEYCODE_NUMPAD_ENTER</td>
<td>小键盘按键回车</td>
</tr>
<tr>
<td>161</td>
<td>KEYCODE_NUMPAD_EQUALS</td>
<td>小键盘按键 ‘&#x3D;’</td>
</tr>
<tr>
<td>162</td>
<td>KEYCODE_NUMPAD_LEFT_PAREN</td>
<td>小键盘按键 ‘(‘</td>
</tr>
<tr>
<td>163</td>
<td>KEYCODE_NUMPAD_RIGHT_PAREN</td>
<td>小键盘按键 ‘)’</td>
</tr>
<tr>
<td>164</td>
<td>KEYCODE_VOLUME_MUTE</td>
<td>扬声器静音键</td>
</tr>
<tr>
<td>165</td>
<td>KEYCODE_INFO</td>
<td>按键 Info</td>
</tr>
<tr>
<td>166</td>
<td>KEYCODE_CHANNEL_UP</td>
<td>按键 Channel up</td>
</tr>
<tr>
<td>167</td>
<td>KEYCODE_CHANNEL_DOWN</td>
<td>按键 Channel down</td>
</tr>
<tr>
<td>168</td>
<td>KEYCODE_ZOOM_IN</td>
<td>放大键</td>
</tr>
<tr>
<td>169</td>
<td>KEYCODE_ZOOM_OUT</td>
<td>缩小键</td>
</tr>
<tr>
<td>170</td>
<td>KEYCODE_TV</td>
<td>按键 TV</td>
</tr>
<tr>
<td>171</td>
<td>KEYCODE_WINDOW</td>
<td>按键 Window</td>
</tr>
<tr>
<td>172</td>
<td>KEYCODE_GUIDE</td>
<td>按键 Guide</td>
</tr>
<tr>
<td>173</td>
<td>KEYCODE_DVR</td>
<td>按键 DVR</td>
</tr>
<tr>
<td>174</td>
<td>KEYCODE_BOOKMARK</td>
<td>按键 Bookmark</td>
</tr>
<tr>
<td>175</td>
<td>KEYCODE_CAPTIONS</td>
<td>按键 Toggle captions</td>
</tr>
<tr>
<td>176</td>
<td>KEYCODE_SETTINGS</td>
<td>按键 Settings</td>
</tr>
<tr>
<td>177</td>
<td>KEYCODE_TV_POWER</td>
<td>按键 TV power</td>
</tr>
<tr>
<td>178</td>
<td>KEYCODE_TV_INPUT</td>
<td>按键 TV input</td>
</tr>
<tr>
<td>179</td>
<td>KEYCODE_STB_POWER</td>
<td>按键 Set-top-box power</td>
</tr>
<tr>
<td>180</td>
<td>KEYCODE_STB_INPUT</td>
<td>按键 Set-top-box input</td>
</tr>
<tr>
<td>181</td>
<td>KEYCODE_AVR_POWER</td>
<td>按键 A&#x2F;V Receiver power</td>
</tr>
<tr>
<td>182</td>
<td>KEYCODE_AVR_INPUT</td>
<td>按键 A&#x2F;V Receiver input</td>
</tr>
<tr>
<td>183</td>
<td>KEYCODE_PROG_RED</td>
<td>按键 Red “programmable”</td>
</tr>
<tr>
<td>184</td>
<td>KEYCODE_PROG_GREEN</td>
<td>按键 Green “programmable”</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>git repo 工具使用教程</title>
    <url>/posts/91e0/</url>
    <content><![CDATA[<h1 id="git-repo-工具使用教程"><a href="#git-repo-工具使用教程" class="headerlink" title="git repo 工具使用教程"></a>git repo 工具使用教程</h1><h2 id="1、repo-是什么？"><a href="#1、repo-是什么？" class="headerlink" title="1、repo 是什么？"></a>1、repo 是什么？</h2><p>repo 是 Google 开发的用于管理 Android 版本库的一个工具，repo 是使用 Python 对 git 进行了一定的封装，并不是用于取代 git，它简化了对多个 Git 版本库的管理。用 repo 管理的版本库都需要使用 git 命令来进行操作。因此，使用 repo 工具之前，请先确保已经安装 git。</p>
<h2 id="2、为什么要用-repo？"><a href="#2、为什么要用-repo？" class="headerlink" title="2、为什么要用 repo？"></a>2、为什么要用 repo？</h2><p>项目模块化&#x2F;组件化之后各模块也作为独立的 Git 仓库从主项目里剥离了出去，各模块各自管理自己的版本。Android 源码引用了很多开源项目，每一个子项目都是一个 Git 仓库，每个 Git 仓库都有很多分支版本，为了方便统一管理各个子项目的 Git 仓库，需要一个上层工具批量进行处理，因此 repo 诞生。</p>
<p>repo 也会建立一个 Git 仓库，用来记录当前 Android 版本下各个子项目的 Git 仓库分别处于哪一个分支，这个仓库通常叫做：manifest 仓库(清单库)。</p>
<h2 id="3、repo-下载安装"><a href="#3、repo-下载安装" class="headerlink" title="3、repo 下载安装"></a>3、repo 下载安装</h2><p>下载地址：</p>
<p>google 地址：<a href="https://storage.googleapis.com/git-repo-downloads/repo">https://storage.googleapis.com/git-repo-downloads/repo</a></p>
<p>国内镜像地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/git/git-repo">https://mirrors.tuna.tsinghua.edu.cn/git/git-repo</a></p>
<p>将下载下来的文件命名为 repo，放在 <code>PATH</code> 环境变量所包含的目录下面，例如可以放在 <code>/usr/local/bin</code> 目录下（后面介绍均以放在 <code>/usr/local/bin</code> 目录下为例）。</p>
<p>可使用 <code>curl</code> 命令直接下载，下载后需为 repo 文件添加可执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; /usr/local/bin/repo</span><br><span class="line">or</span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; /usr/local/bin/repo</span><br><span class="line"></span><br><span class="line">chmod 755 /usr/local/bin/repo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实下载下来的 repo 文件只是一个使用 Python 编写的引导脚本（Google 称之为 Repo launcher，本质上是一个 python 脚本，可以使用 vim 打开的），完整的 repo(即，repo 的主体部分)还没有下载。</p>
</blockquote>
<h2 id="4、repo-help"><a href="#4、repo-help" class="headerlink" title="4、repo help"></a>4、repo help</h2><p>查看 repo 帮助说明，该帮助列举了 repo 所支持的子命令，及各个子命令的简要介绍。</p>
<p>如果需要查看某个具体子命令的详细介绍，执行命令 <code>repo help &lt;command&gt;</code> 即可。例如查看 <code>repo init</code> 的帮助，可以输入 <code>repo help init</code>。</p>
<blockquote>
<p>上一小节已经提及到了，下载下来的repo只是一个引导脚本，完整的repo工具还没有下载，如下图所示，此时使用 <code>repo help</code> 只能看到 <code>init</code> 和 <code>help</code> 两个子命令，而且帮助信息中还会提示 repo 还未安装，需要执行 <code>repo init</code> 安装。(需要注意 <code>repo init</code> 需要跟参数的，详见后续 <code>repo init</code> 的介绍使用)</p>
</blockquote>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702493283.png" alt="image-20230516104632349"></p>
<blockquote>
<p>当执行完 <code>repo init</code> 下载了完整的repo工具之后，再执行 <code>repo help</code> 就会看到 repo 更多的子命令。如下图所示：</p>
</blockquote>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702493392.png" alt="image-20230516104715969"></p>
<h2 id="5、repo-version"><a href="#5、repo-version" class="headerlink" title="5、repo version"></a>5、repo version</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo version</span><br></pre></td></tr></table></figure>

<p>查看repo的版本</p>
<h2 id="6、repo-selfupdate"><a href="#6、repo-selfupdate" class="headerlink" title="6、repo selfupdate"></a>6、repo selfupdate</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo selfupdate</span><br></pre></td></tr></table></figure>

<p>用于 repo 自身的更新。如果有新版本的 repo 存在, 这个命令会升级 repo 到最新版本。通常这个动作在 <code>repo sync</code> 时会自动去做, 所以不需要最终用户手动去执行。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>--no-repo-verify</code>：不要验证 repo 源码.</li>
</ul>
<h2 id="7、repo-init"><a href="#7、repo-init" class="headerlink" title="7、repo init"></a>7、repo init</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo init [options] [manifest url]</span><br><span class="line">repo init -u manifest_git_path -m manifest_file_name -b branch_name --repo-url=repo_url --no-repo-verify</span><br></pre></td></tr></table></figure>

<p>首先当前目录产生一个 <code>.repo</code> 目录</p>
<p>然后克隆一份 repo 的源代码到 <code>.repo/repo</code> 下，里面存放了其他 repo 子命令，即 repo 的主体部分。</p>
<p>接着从 <code>manifest_git_path</code> 仓库地址 clone 清单库到 <code>.repo/manifests和.repo/manifests.git</code> 目录。</p>
<p>同时 <code>.repo</code> 目录下还包括 manifest 仓库(清单库)内容</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-u</code>：指定 Manifest 库的 Git 访问路径。<strong>唯一必不可少的选项</strong></li>
<li><code>-m</code>：指定要使用的 Manifest 文件。不指定的话，默认为 default.xml 文件</li>
<li><code>-b</code>：指定要使用 Manifest 仓库中的某个特定分支。</li>
<li><code>--repo-url</code>：指定 repo 的远端 repoGit 库的访问路径。</li>
<li><code>--no-repo-verify</code>：指定不要验证 repo 源码。</li>
<li><code>--mirror</code>：创建远程存储库的副本，而不是客户端工作目录。该选项用于创建版本库镜像。使用该选项则在下一步 <code>repo sync</code> 同步时，本地按照源的版本库组织方式进行组织，否则会按照 manifest.xml 指定的方式重新组织并检出到本地</li>
</ul>
<h3 id="7-1、修改获取repo的源码路径"><a href="#7-1、修改获取repo的源码路径" class="headerlink" title="7.1、修改获取repo的源码路径"></a>7.1、修改获取repo的源码路径</h3><p>repo主体部分默认从 <a href="https://gerrit.googlesource.com/git-repo">https://gerrit.googlesource.com/git-repo</a> 获取(即，执行 <code>repo init</code> 命令时，不设置 <code>--repo-url</code> 选项），国内需进行代理上网才可以。</p>
<h4 id="解决方案1："><a href="#解决方案1：" class="headerlink" title="解决方案1："></a>解决方案1：</h4><p>每次执行 <code>repo init</code> 时，增加选项 <code>--repo-url=https://gerrit-googlesource.lug.ustc.edu.cn/git-repo</code> </p>
<h4 id="解决方案2："><a href="#解决方案2：" class="headerlink" title="解决方案2："></a>解决方案2：</h4><p>设置环境变量 <code>REPO_URL</code> ,可以加在启动脚本中（例，<code>/etc/profile</code>、<code>~/.bashrc</code> ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="8、-repo-文件夹简介"><a href="#8、-repo-文件夹简介" class="headerlink" title="8、.repo 文件夹简介"></a>8、.repo 文件夹简介</h2><p>执行 <code>repo init</code> 命令之后，会在当前目录创建一个 <code>.repo</code> 文件夹。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree .repo -L 1</span></span><br><span class="line">.repo</span><br><span class="line">├── manifests</span><br><span class="line">├── manifests.git</span><br><span class="line">├── manifest.xml</span><br><span class="line">└── repo</span><br><span class="line"></span><br><span class="line">3 directories, 1 file</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>文件夹</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>manifests</td>
<td>manifest 仓库(清单库)内容，即 <code>repo init</code> 的 <code>-u</code> 选项对应的仓库</td>
</tr>
<tr>
<td>manifests.git</td>
<td>manifest 仓库(清单库)的.git目录</td>
</tr>
<tr>
<td>manifest.xml</td>
<td>指明当前生效的 Manifest 文件，即 <code>repo init</code> 的 <code>-m</code> 选项对应的参数(没有该选项时默认为default.xml)</td>
</tr>
<tr>
<td>repo</td>
<td>repo 命令的主体，包含了最新的 repo 命令</td>
</tr>
</tbody></table>
<h2 id="9、manifest-文件介绍"><a href="#9、manifest-文件介绍" class="headerlink" title="9、manifest 文件介绍"></a>9、manifest 文件介绍</h2><p>所谓 manifest 仓库(清单库)其实就是存放 manifest (清单)文件的仓库，实际上可以是任意仓库，只要该仓库中存在 <code>repo init</code> 命令 <code>-m</code> 选项指定的manifest文件即可，清单库命名为 <code>manifest</code> 只不过是一种约定俗成的写法罢了。</p>
<p>manifest 仓库一般都会有一个 default.xml 文件，该文件为默认的 manifest 文件。</p>
<h3 id="9-1、manifest-文件格式"><a href="#9-1、manifest-文件格式" class="headerlink" title="9.1、manifest 文件格式"></a>9.1、manifest 文件格式</h3><p>manifest 文件是用 XML 文件的格式记录了本项目依赖的各个 Git 仓库的名称、地址，以及分支等信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote</span> <span class="attr">fetch</span>=<span class="string">&quot;ssh://git@git.software.team/learn-repo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">review</span>=<span class="string">&quot;http://xxx.xxx.xxx:8080&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote</span> <span class="attr">fetch</span>=<span class="string">&quot;https://github.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;github&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;origin&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span> <span class="attr">remote</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">sync-j</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;build&quot;</span> <span class="attr">path</span>=<span class="string">&quot;build&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">linkfile</span> <span class="attr">dest</span>=<span class="string">&quot;build.sh&quot;</span> <span class="attr">src</span>=<span class="string">&quot;build.sh&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;docs&quot;</span> <span class="attr">path</span>=<span class="string">&quot;docs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">copyfile</span> <span class="attr">dest</span>=<span class="string">&quot;README.md&quot;</span> <span class="attr">src</span>=<span class="string">&quot;README.md&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;third_party/openssl&quot;</span> <span class="attr">path</span>=<span class="string">&quot;third_party/openssl&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;OpenSSL_1_1_1l&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;curl/curl&quot;</span> <span class="attr">path</span>=<span class="string">&quot;third_party/curl&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;github&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;src&quot;</span> <span class="attr">path</span>=<span class="string">&quot;src&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;release&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-2、remote-元素"><a href="#9-2、remote-元素" class="headerlink" title="9.2、remote 元素"></a>9.2、remote 元素</h3><p>remote 元素可以有多个，用于存在多个 git 远程服务器的情况。</p>
<ul>
<li><code>fetch</code>：使用此 <code>remote</code> 的所有项目的 Git URL 前缀。 每个项目的名称都附加到此前缀以形成用于克隆项目的实际 URL。如果使用此 <code>remote </code>的所有项目的前缀和 manifest 仓库前置一致的话，可以使用 <code>..</code> 代替。</li>
<li><code>name</code>：此清单文件唯一的短名称。此处指定的名称用作每个项目的 <code>.git/config</code> 中的远程名称，因此可自动用于 <code>git fetch</code>、<code>git remote</code>、<code>git pull</code> 和 <code>git push</code> 等命令。</li>
<li><code>review</code>：通过 <code>repo upload</code> 将评论上传到的 <code>Gerrit</code> 服务器的主机名。该属性是可选的；如果未指定，则 <code>repo upload</code> 将不起作用。</li>
<li><code>alias</code>：该属性可以省略，当指定了该属性时，可以覆盖 <code>name</code> 属性设置每个项目的 <code>.git/config</code> 中的远程名称。不同 <code>remote</code> 元素的 <code>alias</code> 属性可以相同，比如不同 <code>remote</code> 元素的 <code>alias</code> 属性可以都是 <code>origin</code>。</li>
</ul>
<h3 id="9-3、default-元素"><a href="#9-3、default-元素" class="headerlink" title="9.3、default 元素"></a>9.3、default 元素</h3><p>default元素只能有一个。</p>
<ul>
<li><code>remote</code>：<code>project</code> 部分不单独指定 <code>remote</code> 的话就使用 <code>default</code> 部分的。</li>
<li><code>revision</code>：<code>project</code> 部分不单独指定 <code>revision</code> 的话就使用 <code>default</code> 部分的。</li>
<li><code>sync-j</code>：同步时(执行 <code>repo sync</code> 命令时)使用的并行作业数</li>
<li><code>sync_c</code>：如果设置为 <code>true</code>，则只同步指定的分支( <code>revision</code> 属性指定)，而不是所有的 <code>ref</code> 内容</li>
<li><code>sync_s</code>：如果设置为 <code>true</code>，则会同步git的子项目</li>
</ul>
<h3 id="9-4、project-元素"><a href="#9-4、project-元素" class="headerlink" title="9.4、project 元素"></a>9.4、project 元素</h3><p>该部分定义了项目代码由哪些子仓库组成</p>
<ul>
<li><code>name</code>：相对于 <code>remote</code> 部分 <code>fetch</code> 指定的前缀的相对路径</li>
<li><code>path</code>：把代码下载下来后在本地的相对于当前路径的相对路径</li>
<li><code>revision</code>：是指下载下来的代码要 <code>checkout</code> 到哪个 <code>revision</code> 上，这里的 <code>revision</code> 可以是commit id、branch</li>
<li><code>name</code>、<code>tag name</code>，本质上都是 commit id。default.xml 中通常用 branch name 做 <code>revision</code>，可以下载到并且 <code>checkout</code> 出该 branch 上最新的代码，标签和 &#x2F; 或 commit id 在理论上应该有效，但尚未经过广泛测试。如果 <code>revision</code> 使用 commit id 的话，那后面必须跟上 <code>upstream</code>，<code>upstream</code> 的值是个 branch name。<code>revision</code> 部分如果省略的话，就等于使用 <code>default</code> 部分定义的 <code>revision</code>。</li>
<li><code>remote</code>：前面定义的远程元素的名称。如果未提供，则使用默认元素提供的值。</li>
</ul>
<h3 id="9-5、copyfile-元素"><a href="#9-5、copyfile-元素" class="headerlink" title="9.5、copyfile 元素"></a>9.5、copyfile 元素</h3><p><code>project</code> 元素的子元素，每个元素描述了一对 <code>src-dest</code> 文件对。同步时(即执行 <code>repo sync</code> 命令时) <code>src</code> 文件会被拷贝到 <code>dest</code>。通常会被用于 README 或 Makefile 或其他构建脚本。</p>
<ul>
<li><code>dest</code>：是相对于当前目录(执行 <code>repo init</code> 和 <code>repo sync</code> 命令的目录)的路径</li>
<li><code>src</code>：是相对于 <code>project path</code> 的相对路径</li>
</ul>
<h3 id="9-6、linkfile-元素"><a href="#9-6、linkfile-元素" class="headerlink" title="9.6、linkfile 元素"></a>9.6、linkfile 元素</h3><p>与 <code>copyfile</code> 类似，只不过不是拷贝，而是建立软连接。</p>
<p>更多关于manifest文件的格式的介绍，可以在 <code>repo init</code> 命令成功执行后，在代码根目录下的 <code>.repo/repo/docs</code> 下看到相关文档说明(问：不会写 manifest 文件，就无法创建清单库，从而无法执行 <code>repo init</code> 怎么办？答：找个开源清单库执行 <code>repo init</code> 即可，或者去 github 上下载一份 repo 的源码)。最简单的方式是直接去网站 <a href="https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/HEAD/docs/manifest-format.md">https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/HEAD/docs/manifest-format.md</a> 查看帮助。</p>
<h2 id="10、repo-sync"><a href="#10、repo-sync" class="headerlink" title="10、repo sync"></a>10、repo sync</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo sync [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>初始化好一个 repo 工作目录后下一步就是把代码同步下来了，该命令用来下载新的更改并更新本地环境中的工作文件。如果您在未使用任何参数的情况下运行 <code>repo sync</code>，则该操作<strong>会同步所有项目</strong>(所有项目是指 manifest 文件中所有的 project 元素)的文件。</p>
<ul>
<li><code>&lt;project&gt;</code>：为 manifest 文件中 <code>project</code> 元素的 <code>name</code> 属性或者 <code>path</code> 属性的值。如果只需要同步某一个或者个别几个项目的话，就可以采用这种方法。</li>
</ul>
<p>运行 <code>repo sync</code> 后，将出现以下情况：</p>
<ul>
<li><p>如果目标项目从未同步过，则 <code>repo sync</code> 相当于 <code>git clone</code>。远程代码库中的所有分支都会复制到本地项目目录中。</p>
</li>
<li><p>如果目标项目已同步过，则 <code>repo sync</code> 相当于以下命令：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote update</span><br><span class="line">git rebase origin/&lt;BRANCH&gt;</span><br></pre></td></tr></table></figure>

<p>其中 <code>&lt;BRANCH&gt;</code> 是本地项目目录中当前已检出的分支。如果本地分支没有在跟踪远程代码库中的分支，则相应项目不会发生任何同步。</p>
<ul>
<li>如果 <code>git rebase</code> 操作导致合并冲突，那么您需要使用普通Git命令（例如 <code>git rebase --continue</code>）来解决冲突。</li>
</ul>
<p><code>repo sync</code> 运行成功后，指定项目中的代码会与远程代码库中的代码保持同步。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-d</code>：将指定项目切换回清单修订版本。如果项目当前属于某个主题分支，但只是临时需要清单修订版本，则此选项会有所帮助。</li>
<li><code>-s</code>：同步到当前清单中清单服务器元素指定的一个已知的良好版本。</li>
<li><code>-f</code>：即使某个项目同步失败，系统也会继续同步其他项目。</li>
<li><code>-t</code>：使用对应tag里的 manifest 文件</li>
<li><code>-m</code>：手动指定当前操作使用哪个 manifest 文件</li>
<li><code>--force-sync</code>：如果需要，强制覆盖现有的 git 目录指向不同的对象目录。此操作可能会导致数据丢失</li>
</ul>
<blockquote>
<p><strong><code>repo sync</code> 后 <code>git branch -a</code> 显示中 “no branch” 和 “remotes&#x2F;m&#x2F;master” 的含义</strong></p>
<p>使用 repo 工具同步代码之后，进入任意项目路径下，执行 <code>git branch -a</code> 输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* (no branch)</span><br><span class="line">  remotes/m/master -&gt; origin/dev</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure>

<ol>
<li><p>输出中的后两行比较好理解，就是该仓库的远程仓库里存在的分支。</p>
</li>
<li><p>输出的第一行 <code>* (no branch)</code> 中的 <code>*</code> 表示当前所在的分支，该行意思是，当前不再任何分支上。</p>
</li>
</ol>
<p>为什么会显示 <code>no branch</code> 呢？</p>
<p><code>repo sync</code> 只是根据清单文件中 <code>revision</code> 版本进行更新的，没有固定的 branch，<code>repo sync</code> 成功之后，不能直接进行操作，需要先执行 <code>repo start</code> 建立新的分支进行开发。</p>
<p>其实，执行 <code>repo branches</code> 命令也会显示 no branches 的，这个就更好理解了，不同的子仓库的 <code>revision</code> 不尽相同，所有git仓库放在一起，更是没有一个确切的branch了。</p>
<ol start="3">
<li>输出的第二行中 <code>remotes/m/master -&gt; origin/dev</code> 又是什么意思呢？</li>
</ol>
<p>前一部分表示 repo 清单库( manifest 仓库)的分支，即执行 <code>repo init</code> 命令时 <code>-b</code> 选项的参数，如果执行 <code>repo init</code> 命令时没有指定 <code>-b</code> 选项，则表示默认采用清单库的 master 分支。</p>
<p>箭头所指的后一部分 <code>origin/dev</code>，表示当前所使用的清单文件(.xml文件)里面指定的单个git库的 <code>revision</code> 值（即，清单文件中 <code>project</code> 元素的 <code>revision</code> 属性，如果 <code>project</code> 元素没有指定 <code>revision</code> 属性，则默认使用的是 <code>default</code> 元素的 <code>revision</code> 属性）。</p>
<p>这样做的目的是：为了让用户方便的知道自己目前工作在清单库的哪个分支上。当前的清单库的这个分支又引用了当前 git 库的哪个 <code>branch/tag</code> 上</p>
</blockquote>
<h2 id="11、repo-start"><a href="#11、repo-start" class="headerlink" title="11、repo start"></a>11、repo start</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo start &lt;newbranchname&gt; [--all | &lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>创建并切换分支。<strong>刚克隆下来的代码是没有分支的</strong>，<code>repo start</code> 实际是对 <code>git checkout -b</code> 命令的封装。</p>
<p>为指定的项目或所有的项目（若使用 <code>-all</code>），以清单文件中为设定的分支，创建特定的分支。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>&lt;newbranchname&gt;</code>：参数应简要说明您尝试对项目进行的更改。</li>
<li><code>&lt;project&gt;</code>：指定了将参与此主题分支的项目。</li>
</ul>
<blockquote>
<p>tip：可以使用<code>.</code>表示当前工作目录中的所有项目</p>
</blockquote>
<p>这条指令与 <code>git checkout -b</code> 还是有很大区别的。</p>
<ul>
<li><p><code>git checkout -b</code>：是在当前所在的分支的基础上创建特性分支。</p>
</li>
<li><p><code>repo start</code>：是在清单文件设定的分支的基础上创建特性分支。</p>
</li>
</ul>
<h2 id="12、repo-status"><a href="#12、repo-status" class="headerlink" title="12、repo status"></a>12、repo status</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo status [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>查看文件状态。对于每个指定的项目，将工作树与临时区域（索引）以及此分支 (HEAD) 上的最近一次提交进行比较。在这三种状态存在差异之处显示每个文件的摘要行。</p>
<p>要仅查看当前分支的状态，请运行 <code>repo status</code>。系统会按项目列出状态信息。对于项目中的每个文件，系统使用两个字母的代码来表示：</p>
<ul>
<li>在第一列中，大写字母表示临时区域与上次提交状态之间的不同之处。</li>
</ul>
<table>
<thead>
<tr>
<th>字母</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>无更改</td>
<td>HEAD 与索引中相同</td>
</tr>
<tr>
<td>A</td>
<td>已添加</td>
<td>不存在于 HEAD 中，但存在于索引中</td>
</tr>
<tr>
<td>M</td>
<td>已修改</td>
<td>存在于 HEAD 中，但索引中的文件已修改</td>
</tr>
<tr>
<td>D</td>
<td>已删除</td>
<td>存在于 HEAD 中，但不存在于索引中</td>
</tr>
<tr>
<td>R</td>
<td>已重命名</td>
<td>不存在于 HEAD 中，但索引中的文件的路径已更改</td>
</tr>
<tr>
<td>C</td>
<td>已复制</td>
<td>不存在于 HEAD 中，已从索引中的另一个文件复制</td>
</tr>
<tr>
<td>T</td>
<td>模式已更改</td>
<td>HEAD 与索引中的内容相同，但模式已更改</td>
</tr>
<tr>
<td>U</td>
<td>未合并</td>
<td>HEAD 与索引中的内容相同，但模式已更改</td>
</tr>
</tbody></table>
<ul>
<li>在第二列中，小写字母表示工作目录与索引之间的不同之处。</li>
</ul>
<table>
<thead>
<tr>
<th>字母</th>
<th>含义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>新&#x2F;未知</td>
<td>HEAD 与索引中相同</td>
</tr>
<tr>
<td>m</td>
<td>已修改</td>
<td>存在于索引中，也存在于工作树中（但已修改）</td>
</tr>
<tr>
<td>d</td>
<td>已删除</td>
<td>存在于索引中，不存在于工作树中</td>
</tr>
</tbody></table>
<p>两个表示状态的字母后面，显示文件名信息。如果有文件重名还会显示改变前后的文件名及文件的相似度。</p>
<h2 id="13、repo-checkout"><a href="#13、repo-checkout" class="headerlink" title="13、repo checkout"></a>13、repo checkout</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo checkout &lt;branchname&gt; [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>切换分支。 实际上是对 <code>git checkout</code> 命令的封装，但不能带 <code>-b</code> 参数，所以不能用此命令来创建特性分支。</p>
<p>该命令等同于：<code>repo forall [&lt;project&gt;...] -c git checkout &lt;branchname&gt;</code></p>
<h2 id="14、repo-branch"><a href="#14、repo-branch" class="headerlink" title="14、repo branch"></a>14、repo branch</h2><p>该命令等同于 <code>repo branches</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo branches [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>汇总当前所有可用的主题分支。</p>
<h2 id="15、repo-diff"><a href="#15、repo-diff" class="headerlink" title="15、repo diff"></a>15、repo diff</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo diff [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>查看工作区文件差异。实际是对 <code>git diff</code> 命令的封装，用于分别显示各个项目或指定项目工作区下的文件差异。在 commit 和工作目录之间使用 <code>git diff</code> 显示明显差异的更改。</p>
<h2 id="16、repo-stage"><a href="#16、repo-stage" class="headerlink" title="16、repo stage"></a>16、repo stage</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo stage -i [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>把文件添加到 index 表中。实际上是对 <code>git add --interactive</code> 命令的封装，用于挑选各个项目中的改动以加入暂存区。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-i</code>：表示 <code>git add --interactive</code> 命令中的 <code>--interactive</code> ，给出一个界面供用户选择。</li>
</ul>
<h2 id="17、repo-forall"><a href="#17、repo-forall" class="headerlink" title="17、repo forall"></a>17、repo forall</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo forall [&lt;project&gt;...] -c &lt;command&gt; [&lt;arg&gt;...]</span><br></pre></td></tr></table></figure>

<p>在每个项目中运行指定的 shell 命令。通过 <code>repo forall</code> 可使用下列额外的环境变量：</p>
<ul>
<li><code>REPO_PROJECT</code>：项目的名称。</li>
<li><code>REPO_PATH</code>：项目在该工作区的相对路径。</li>
<li><code>REPO_REMOTE</code>：项目远程仓库的名称。</li>
<li><code>REPO_LREV</code>：manifest 文件中 <code>revision</code> 属性，已转换为本地跟踪分支。如果您需要将 manifest 中 <code>revision</code> 值传递到某个本地运行的 Git 命令，则可使用此变量。</li>
<li><code>REPO_RREV</code>：manifest 文件中 <code>revision</code> 属性，与 manifest 文件中显示的名称完全一致。</li>
</ul>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-c</code>：要运行的命令和参数，即 shell 命令。此命令会通过 <code>/bin/sh</code> 进行求值，它之后的任何参数都将作为 shell 位置参数传递。</li>
<li><code>-p</code>：在指定命令输出结果之前显示项目标头。这通过以下方式实现：将管道绑定到命令的 <code>stdin</code>、<code>stdout</code> 和 <code>sterr</code> 流，然后通过管道将所有输出结果传输到一个页面调度会话中显示的连续流中。</li>
<li><code>-v</code>：显示该命令向 <code>stderr</code> 写入的消息。</li>
</ul>
<blockquote>
<p>注意：shell 指令中有上述环境变量时，则需要用使用单引号把 shell 命令括起来。</p>
</blockquote>
<p><strong>示例：</strong></p>
<ol>
<li>打印项目列表</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo forall -c &#x27;echo $REPO_PROJECT&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打印项目路径</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo forall -c &#x27;echo $REPO_PATH&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="18、repo-prune"><a href="#18、repo-prune" class="headerlink" title="18、repo prune"></a>18、repo prune</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo prune [&lt;PROJECT_LIST&gt;]</span><br></pre></td></tr></table></figure>

<p>删除已经合并分支。实际上是对 <code>git branch -d</code> 命令的封装，该命令用于扫描项目的各个分支，并删除已经合并的分支。</p>
<h2 id="19、repo-abandon"><a href="#19、repo-abandon" class="headerlink" title="19、repo abandon"></a>19、repo abandon</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo abandon [--all | &lt;branchname&gt;] [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>删除指定分支。实际是对 <code>git brance -D</code> 命令的封装。</p>
<h2 id="20、repo-upload"><a href="#20、repo-upload" class="headerlink" title="20、repo upload"></a>20、repo upload</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo upload [--re --cc] [&lt;project&gt;]...</span><br></pre></td></tr></table></figure>

<p>对于指定的项目，repo会将本地分支与最后一次 <code>repo sync</code> 时更新的远程分支进行比较。repo 会提示您选择一个或多个尚未上传以供审核的分支。</p>
<blockquote>
<p>注意：使用 <code>repo upload</code> 需要搭建 gerrit 环境，并且在 manifest 文件 <code>remote</code> 元素中添加 <code>review</code> 属性</p>
</blockquote>
<p>您选择一个或多个分支后，所选分支上的所有提交都会通过 HTTPS 连接传输到 Gerrit。您需要配置一个 HTTPS 密码以启用上传授权。要生成新的用户名&#x2F;密码对以用于 HTTPS 传输，请访问密码生成器。</p>
<p>当 Gerrit 通过其服务器接收对象数据时，它会将每项提交转变成一项更改，以便审核者可以单独针对每项提交给出意见。要将几项“检查点”提交合并为一项提交，请使用 <code>git rebase -i</code>，然后再运行 <code>repo upload</code>。</p>
<p>如果您在未使用任何参数的情况下运行 <code>repo upload</code>，则该操作会搜索所有项目中的更改以进行上传。</p>
<p>要在更改上传之后对其进行修改，您应该使用 <code>git rebase -i</code> 或 <code>git commit --amend</code> 等工具更新您的本地提交。修改完成之后，请执行以下操作：</p>
<ul>
<li>进行核对以确保更新后的分支是当前已检出的分支。</li>
<li>对于相应系列中的每项提交，请在方括号内输入 Gerrit 更改 ID：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replacing from branch foo</span></span><br><span class="line">[ 3021 ] 35f2596c Refactor part of GetUploadableBranches to lookup one specific...</span><br><span class="line">[ 2829 ] ec18b4ba Update proto client to support patch set replacments</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Insert change numbers <span class="keyword">in</span> the brackets to add a new patch <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To create a new change record, leave the brackets empty.</span></span><br></pre></td></tr></table></figure>

<p>上传完成后，这些更改将拥有一个额外的补丁程序集。</p>
<p><code>repo upload</code> 相当于 <code>git push</code>，但是又有很大的不同。它将版本库改动推送到代码审核服务器（Gerrit 软件架设）的特殊引用上。代码审核服务器会对推送的提交进行特殊处理，将新的提交显示为一个待审核的修改集，并进入代码审核流程，只有当审核通过后，才会合并到官方正式的版本库中。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-t</code>：发送本地分支名称到 Gerrit 代码审核服务器</li>
<li><code>--re=REVIEWERS</code>：要求指定的人员进行审核</li>
<li><code>--cc=CC</code>：同时发送通知到如下邮件地址</li>
</ul>
<h2 id="21、repo-download"><a href="#21、repo-download" class="headerlink" title="21、repo download"></a>21、repo download</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo download &#123;[project] change[/patchset]&#125;...</span><br></pre></td></tr></table></figure>

<p>从审核系统中下载指定更改，并放在您项目的本地工作目录中供使用。</p>
<p>例如，要将 <a href="https://android-review.googlesource.com/23823">更改 23823</a> 下载到您的平台&#x2F;编译目录，请运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo download platform/build 23823</span><br></pre></td></tr></table></figure>

<p><code>repo sync</code> 应该可以有效移除通过 <code>repo download</code> 检索到的任何提交。或者，您可以将远程分支检出，例如 <code>git checkout m/master</code>。</p>
<blockquote>
<p>repo download 命令主要用于代码审核者下载和评估贡献者提交的修订。</p>
<p>贡献者的修订在 Git 版本库中 refs&#x2F;changes&#x2F;&#x2F; 引用方式命名（缺省的 patchset 为1），和其他 Git 引用一样，用 <code>git fetch</code> 获取，该引用所指向的最新的提交就是贡献者待审核的修订。</p>
<p>使用 <code>repo download</code> 命令实际上就是用 <code>git fetch</code> 获取到对应项目的 <code>refs/changes//patchset&gt;</code> 引用，并自动切换到对应的引用上。</p>
</blockquote>
<h2 id="22、repo-grep"><a href="#22、repo-grep" class="headerlink" title="22、repo grep"></a>22、repo grep</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo grep &#123;pattern | -e pattern&#125; [&lt;project&gt;...]</span><br></pre></td></tr></table></figure>

<p>打印出符合某个模式的行。相当于对 <code>git grep</code> 的封装，用于在项目文件中进行内容查找。</p>
<h2 id="23、repo-manifest"><a href="#23、repo-manifest" class="headerlink" title="23、repo manifest"></a>23、repo manifest</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo manifest [-o &#123;-|NAME.xml&#125;] [-m MANIFEST.xml] [-r]</span><br></pre></td></tr></table></figure>

<p>manifest 检验工具，用于显示当前使用的manifest文件内容。</p>
<p><strong>常用选项：</strong></p>
<ul>
<li><code>-r</code>, <code>--revision-as-HEAD</code>：把某版次存为当前的 HEAD</li>
<li><code>-o -|NAME.xml</code>,<code>--output-file=-|NAME.xml</code>：把 manifest 存为 NAME.xml</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取仓库的sha1值，并记录在一个新的release.xml文件中</span></span><br><span class="line">repo manifest -o release.xml -r</span><br></pre></td></tr></table></figure>

<h2 id="24、repo-工作流程"><a href="#24、repo-工作流程" class="headerlink" title="24、repo 工作流程"></a>24、repo 工作流程</h2><p>常用的 repo 工作流程如下：</p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702493497.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>repo</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 X11 运行 Linux 图形化界面</title>
    <url>/posts/cd9b/</url>
    <content><![CDATA[<h1 id="通过-X11-运行-Linux-图形化界面"><a href="#通过-X11-运行-Linux-图形化界面" class="headerlink" title="通过 X11 运行 Linux 图形化界面"></a>通过 X11 运行 Linux 图形化界面</h1><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>在日常开发中，大家都会使用到 VMware 运行自己的 Linux 服务器，有时会为了性能和效率的考虑，不会安装图形化界面，也就无法使用 Linux 图形化工具。或者安装了图形化界面，日常只使用 SSH 工具，需要使用 Linux 图形化工具时再打开 VMware 窗口。</p>
<p>有没有什么办法可以便捷的使用 Linux 上的图形化工具呢？</p>
<p>可以使用支持 X11 Forwarding 的 SSH 工具来实现直接打开 Linux 图形化工具。</p>
<h3 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h3><h3 id="2-1、X-协议"><a href="#2-1、X-协议" class="headerlink" title="2.1、X 协议"></a>2.1、X 协议</h3><blockquote>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702452870.png" alt="3f69d7eeda18db736e68768341546870.png"></p>
<p>与 Windows 不同，Linux 本身是没有图形化界面的，所谓的图形化界面系统只不过中 Linux 下的应用程序。Linux 的图形化界面，底层都是基于 X 协议。</p>
<p>X 协议由 X server 和 X client 组成：</p>
<ul>
<li>X server 管理主机上与显示相关的硬件设置(如显卡、硬盘、鼠标等)，它负责屏幕画面的绘制与显示，以及将输入设置(如键盘、鼠标)的动作告知 X client。</li>
<li>X client (即 X 应用程序) 则主要负责事件的处理(即程序的逻辑)。</li>
</ul>
<p>举个例子，如果用户点击了鼠标左键，因为鼠标归 X server 管理，于是 X server 就捕捉到了鼠标点击这个动作，然后它将这个动作告诉 X client，因为 X client 负责程序逻辑，于是 X client 就根据程序预先设定的逻辑(例如画一个圆)，告诉 X server说：“请在鼠标点击的位置，画一个圆”。最后，X server 就响应 X client 的请求，在鼠标点击的位置，绘制并显示出一个圆。</p>
</blockquote>
<h3 id="2-2、X11-Forwarding"><a href="#2-2、X11-Forwarding" class="headerlink" title="2.2、X11 Forwarding"></a>2.2、X11 Forwarding</h3><blockquote>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702452972.png" alt="ae5f35c8c68bd44bd5198dd11d266a6c.png"></p>
<p>许多时候 X server 和 X client 在同一台主机上，这看起来没什么。但是， X server 和 X client 完全可以运行在不同的机器上，只要彼此通过 X 协议通信即可。于是，我们就可以做一些“神奇”的事情，比如可以在本地显示 (X server)，运行在服务器上的 GUI 程序 (X client)。这样的操作可以通过 SSH X11 Forwarding (转发) 来实现。</p>
<p>X11 中的 X 指的就是 X 协议，11 指的是采用 X 协议的第 11 个版本。</p>
</blockquote>
<h3 id="2-3、SSH-工具"><a href="#2-3、SSH-工具" class="headerlink" title="2.3、SSH 工具"></a>2.3、SSH 工具</h3><p>有不少 SSH 工具支持 X11 Forwarding，在这里推荐大家使用 MobaXterm。MobaXterm 是开源、免费、自带 X Server 的全功能终端软件。也可以使用 Xshell 配合 Xmanager 实现 X11 Forwarding，但是 Xmanager 需要付费，想使用的伙伴可自行魔法解决。</p>
<p>MobaXterm 官网下载：<a href="https://mobaxterm.mobatek.net/download.html">MobaXterm Xserver with SSH, telnet, RDP, VNC and X11 - Download (mobatek.net)</a></p>
<p>MobaXterm 汉化下载（推荐）：<a href="https://github.com/RipplePiam/MobaXterm-Chinese-Simplified">RipplePiam&#x2F;MobaXterm-Chinese-Simplified: MobaXterm 简体中文汉化版🌏🖥🖥🖥 【💌慢工精心制作，”提示”也汉化💻】 【😍控件布局精细调整】 (github.com)</a></p>
<p>MobaXterm 带有许多功能和工具，有兴趣的伙伴可自行探索。</p>
<h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><h4 id="3-1、Linux-端配置"><a href="#3-1、Linux-端配置" class="headerlink" title="3.1、Linux 端配置"></a>3.1、Linux 端配置</h4><p>修改 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 配置文件，打开以下配置开关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X11Forwarding yes</span><br><span class="line">X11UseLocalhost no</span><br><span class="line">AddressFamily inet</span><br></pre></td></tr></table></figure>

<p>重启 SSH 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<h4 id="3-2、Windows-端使用（MobaXterm）"><a href="#3-2、Windows-端使用（MobaXterm）" class="headerlink" title="3.2、Windows 端使用（MobaXterm）"></a>3.2、Windows 端使用（MobaXterm）</h4><h5 id="3-2-1、点击会话，选择-SSH-连接-Linux-服务器"><a href="#3-2-1、点击会话，选择-SSH-连接-Linux-服务器" class="headerlink" title="3.2.1、点击会话，选择 SSH 连接 Linux 服务器"></a>3.2.1、点击会话，选择 SSH 连接 Linux 服务器</h5><p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453077.png" alt="image-20231213101255739"></p>
<h5 id="3-2-2、打开-GUI-程序"><a href="#3-2-2、打开-GUI-程序" class="headerlink" title="3.2.2、打开 GUI 程序"></a>3.2.2、打开 GUI 程序</h5><ol>
<li>打开 xclock</li>
</ol>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453182.png" alt="image-20231213101530204"></p>
<ol start="2">
<li>打开 VS Code</li>
</ol>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453287.png" alt="image-20231213101643305"></p>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453392.png" alt="image-20231213101807314"></p>
<ol start="3">
<li>打开 Afsp</li>
</ol>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453497.png" alt="image-20231213102106424"></p>
<ol start="4">
<li>打开 gvim</li>
</ol>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453603.png" alt="image-20231213102225402"></p>
<ol start="5">
<li>打开 GParted</li>
</ol>
<p><img src="/images/loading.gif" data-original="https://github.com/winter-ruize/blog_images/raw/main/images/2024/01/31/1706702453708.png" alt="image-20231213102739448"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>X11</tag>
      </tags>
  </entry>
</search>
